#+title: Docs/Emacs Lisp

See [[file:emacs.org][Docs/Emacs]] for general Emacs reference.

elisp file extension is =.el=

* Help / Documentation
To open [[info:elisp#Top][Emacs Lisp reference]] ([[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][weblink]]):
: C-h R elisp

To open [[info:eintr#Top][An Introduction to Programming in Emacs Lisp]] ([[https://www.gnu.org/software/emacs/manual/eintr.html][weblink]]):
: C-h R eintr
- Emacs 28+

elisp “cheat sheet” (short doc. summary for functions in specified group):
: M-x shortdoc-display-group
- [[https://www.masteringemacs.org/article/emacs-builtin-elisp-cheat-sheet][Source]]

* Types
** Primitive Types
*** Programming Types
General Lisp types.
- see [[info:elisp#Programming Types][elisp#Programming Types]]

**** Integers & Floats

_fixnum_ ([[info:elisp#Integer Type][elisp#Integer Type]])

Small(ish) integer.

Check variables ~most-negative-fixnum~ and ~most-positive-fixnum~ for
integer range. The minimum range is -2**29 … 2**29-1.

On overflow, a fixnum turns into a /bignum/.

A final ~.~ or leading ~+~ do not change the value or type of the integer.
- e.g. ~+1 = 1. = 1~

_bignum_

Arbitrary precision integer.

_floating-point_ ([[info:elisp#Floating-Point Type][elisp#Floating-Point Type]])

Syntax requires either a decimal point (with at least one digit
following), an exponent or both.
- e.g. ~1500.0~, ~+15e2~, ~15.0e+2~, ~+1500000e-3~, and ~.15e4~ are all equivalent
  representations for a floating-point number with value 1500

**** Characters & Strings

_character_ ([[info:elisp#Character Type][elisp#Character Type]])

Uncommon in Elisp code.

Represented by its *character code*, an integer.
- e.g. ~A~ is represented by ~65~
- can also be written with the char after a ~?~, e.g. ~?A~

To turn a char code into its string representation:
: (char-to-string <code>)

To turn a string into its char code representation:
: (string-to-char <str>)

Limited to the range of 0 … 4194303 (22 bits).

_strings_ → see [[#seq-types]] (array subtypes)

**** Symbols & Keywords
([[info:elisp#Symbol Type][elisp#Symbol Type]])

_symbol_

Unique object identified by its name. May refer to a function, variable,
property list or just an object distinct from all other objects.
- name can contain any characters (letters, digits, punctuation chars)
  - ~-+=*/~ and ~_\tilde!@$%^&:<>{}?~ (less common) can be used as is
  - any other character can be included with a ~\~ escape char
- cannot look like a number; prepend ~\~ for distinction
- lower and upper case letters are distinct

_keyword symbol_

Acts as a constant.

Representation starts with a ~:~

**** Sequences & Cons Cells
:PROPERTIES:
:CUSTOM_ID: seq-types
:END:
([[info:elisp#Sequence Type][elisp#Sequence Type]])

Sequences can be /lists/ or /arrays/.

Equally written sequences are never read as the same object.
- ~()~ is an exception, it always stands for the object ~nil~

---

_cons cell_ ([[info:elisp#Cons Cell Type][elisp#Cons Cell Type]])

Object consisting of a *CAR* slot and a *CDR* slot for any Lisp object.

An *atom* is any object which is not a cons cell.

#+begin_src elisp
(equal '(1 . 2) (cons 1 2)) ;=> t
#+end_src

_list_

Series of *cons cells*, linked together:
#+begin_src elisp
(equal '(a b c) (list 'a 'b 'c)) ;=> t

(equal '(a . (b . (c . ())))
       '(a b c)) ;=> t
#+end_src

Can hold elements of any type. Most common.
- the empty list also counts as an element

An *association list* (or *alist*) is a list whose elements are cons cells.
- the CAR is considered the /key/, the CDR the /value/ of a cons cell entry
  (sometimes the value is in the CAR of the CDR)
- sometimes alists are used as /stacks/

---

_array_ ([[info:elisp#Array Type][elisp#Array Type]])

Fixed-length, zero-indexed, one-dimensional.


*Subtypes:*


_string_ ([[info:elisp#String Type][elisp#String Type]])

Character array, chars can have text properties.
- evaluated as constants

Syntax in double quotes.


_vector_ ([[info:elisp#Vector Type][elisp#Vector Type]])

Elements can be any type, no text properties.
- evaluated as constants

Print/read syntax in square-brackets, e.g. ~[1 "two" (three)]~.


_char-table_ ([[info:elisp#Char-Table Type][elisp#Char-Table Type]])

Like vectors, but indexed by any valid char code. Useful if information
is assigned to character codes
- can have a parent to inherit from
- can have a default value
- can have a small number of extra slots for special purposes
- can specify a single value for a whole character set

Print syntax like vector but with ~#^~ prepended.

Used for *case tables*, *character category tables*, *display tables* and
*syntax tables*.


_bool-vector_ ([[info:elisp#Bool-Vector Type][elisp#Bool-Vector Type]])

Elements must be ~t~ or ~nil~.

Print syntax like string, but prepended with ~#&~ followed by the length.

#+begin_src elisp
(make-bool-vector 3 t) ;=> #&3"^G" (binary code for C-g is 111)
(make-bool-vector 3 nil) ;=> #&3"^@" (binary code for C-@ is 0)
#+end_src

**** Hash Table
([[info:elisp#Hash Table Type][elisp#Hash Table Type]])

Very fast kind of lookup table. Similar to alist, but much faster.

#+begin_src elisp
(make-hash-table) ;=> #s(hash-table size 65 test eql rehash-size 1.5
                  ;      rehash-threshold 0.8125 data ())
#+end_src

**** Records

_Record_ ([[info:elisp#Record Type][elisp#Record Type]])

Like a vector, but the first element holds its type (as returned by
~type-of~).

Allows to create objects with new types not built into Emacs.

_Type Descriptor_ ([[info:elisp#Type Descriptors][elisp#Type Descriptors]])

A /record/, which holds information about a type.

**** Functions

_Function_ ([[info:elisp#Function Type][elisp#Function Type]])

A non-compiled function is a /lambda expression/.

Functions are also Lisp objects. They can be created at runtime and then
called with the primitive functions ~funcall~ and ~apply~.

_Primitive Function_ ([[info:elisp#Primitive Function Type][elisp#Primitive Function Type]])

Written in C, callable from Lisp.
- also called “subrs” (subroutines) or “built-in functions”
- redefinition of a primitive function is discouraged

No read syntax, printed in hash notation with the name of the
subroutine.

Most evaluate all their arguments when called. A primitive function
which does not do that is called a “special form”.

#+begin_src elisp
(symbol-function 'car) ;=> #<subr car>

(subrp (symbol-function 'car)) ;=> t
#+end_src

_Byte-Code Function_ ([[info:elisp#Byte-Code Type][elisp#Byte-Code Type]])

Objects produced by byte-compiling Lisp code. Internally much like a
vector, but the evaluator handles it specially when it appears in a
function call.

Read/print syntax like vector, but with ~#~ prepended.

**** Macro
([[info:elisp#Macro Type][elisp#Macro Type]])

List with the symbol ~macro~ as its first element and whose CDR is a Lisp
function object, including the ~lambda~ symbol.

Usually defined with the ~defmacro~ macro.

**** Other types

_Autoload_ ([[info:elisp#Autoload Type][elisp#Autoload Type]])

For automatically loading seldom used functions.

Stored as a function definition of a symbol, where it serves as a
placeholder for the real definition.
- usually created with the function ~autoload~
- contains the name of the file, where the real definition is found,
  plus other information about the real definition

The file with the real definition should be loaded when necessary. After
loading, the symbol should have a new function definition corresponding
to the one in the loaded file.

Syntax is a list whose first element is the symbol ~autoload~.

_Finalizer_ ([[info:elisp#Finalizer Type][elisp#Finalizer Type]])

Runs code when no longer reachable. Helps Lisp code clean up after
objects that are no longer needed.

*** Editing Types
Specific to Emacs Lisp.
- see [[info:elisp#Editing Types][elisp#Editing Types]]

**** Buffer

**** Marker

**** Window

**** Frame

** Representation
Generate printed representation:
: (print <form>)
Read syntax:
: (read <string>)

Objects without a read syntax are printed in hash notation: ~#<…>~
- this notation cannot be processed by the reader

** Type Predicates
- see [[info:elisp#Type Predicates][elisp#Type Predicates]]

Check the /primitive type/ of an object:
: (type-of <obj>)

Check for a specific type (incomplete list):
: atom : symbolp
: arrayp : listp : vectorp : sequencep
: numberp : wholenump : integerp :fixnump : bignump : floatp 
: markerp : integer-or-marker-p : number-or-marker-p
: booleanp : bool-vector-p
: stringp : char-or-string-p : string-or-null-p
: functionp : commandp : subrp (primitive functions)
: keywordp
: keymapp
: bufferp : windowp : window-live-p : framep : threadp

** Equality Predicates
- see [[info:elisp#Equality Predicates][elisp#Equality Predicates]]

_General_

Referential equality (same /Lisp object/):
: (eq <obj1> <obj2>)
- use to compare symbols

Structural equality (similar /contents/ and same /data type/):
: (equal <obj1> <obj2>)
- use to compare lists, vectors, strings, etc.
- integers are compared via ~eql~, so integers != floats
- symbols must match exactly


_Numbers_

Numeric identity (~eq~ and indistinguishable numbers):
: (eql <obj1> <obj2>)
- integers and floats are always different

Numeric equality (all numbers and markers):
: (= <n1> <n2>)
- integers and floats can be equal

Other comparators:
: (/= <n1> <n2>)
: (< <n> …) : (<= <n> …) : (> <n> …) : (>= <n> …)


_Strings_

String equality:
: (string-equal <s1> <s2>)
case-insensitive:
: (string-equal-ignore-case <s1> <s2>)

Compare strings by lexicographical order:
: (string-lessp <s1> <s2>)
: (string-greaterp <s1> <s2>)

Compare strings by version number:
: (string-version-lessp <s1> <s2>)
- examples:
  - ~(string-version-lessp "pic4.png" "pic32.png") => t~
  - ~(string-version-lessp "1.9.3" "1.10.2") => t~

Compare strings by collation order:
: (string-collate-lessp <s1> <s2>)
- examples:
  - ~(string-collate-lessp "abc" "abd") => t~

* Syntax
** Special Read Syntax
- see [[info:elisp#Special Read Syntax][elisp#Special Read Syntax]]
** Comments
: ; <comment>
** Quotes
#+begin_src elisp
;; normal quotes
'(1 2 3) ;=> (1 2 3)

;; Quasiquotes / syntax quotes
`(1 2 ,(+ 1 2)) ;=> (1 2 3)
#+end_src

** Boolean values
- ~nil~ is FALSE, ~t~ is TRUE
- ~nil~ and ~()~ are the same, it is just a syntactic difference
- any non-~nil~ value is considered TRUE (prefer ~t~)

#+begin_src elisp
;;; nil = false
(eq t (not nil))
;;; nil = empty list
(eq nil '())
;;; empty list != true
(eq nil (eq '() t))

;;; '()' is just a convention, there is no distinction to nil
(eq nil (cdr '(foo)))

(equal (cons 'foo ())
       (cons 'foo nil))

#+end_src
** Variables
#+begin_src elisp
(defvar foo/x (list 1 2 3 4))
(setf (cadr foo/x) 'boo) ;=> (1 boo 3 4)
#+end_src
** Namespaces
Variables and functions don’t share the same namespace.

* Functions
** Loops
*** ~while~
Special form that first evaluates ~condition~ and, if non-nil, evaluates
~forms~ in order, then repeats until ~condition~ is ~nil~. Always returns ~nil~.
: (while <condition>
:   <forms …>)

#+begin_src elisp :results output
(setq n 5)

(while (> n 0)
  (princ (format "Iteration %d. " n))
  (setq n (1- n)))
#+end_src

#+RESULTS:
: Iteration 5. Iteration 4. Iteration 3. Iteration 2. Iteration 1. 

Example of writing a /repeat-until/ loop, which executes the first line in
~progn~ until the /end-test/ below is non-nil (~while~ has no body here):
#+begin_src elisp
(while (progn
         (forward-line 1)
         (not (looking-at "^$"))))

#+end_src

*** ~dolist~
Macro that executes ~body~ once for each item of ~list~, binding it to ~var~
locally. Returns ~nil~ or (if specified) the value of ~result~.
: (dolist (<var> <list> <?result>)
:   <body …>)

*Note:* ~result~ is just a slot for a user-defined variable that ~dolist~ will
return after its execution. ~dolist~ does not do anything else with it.
- if omitted, ~dolist~ will return ~nil~

#+begin_src elisp :results output
(dolist (item '(1 2 3))
  (princ item))
#+end_src

#+RESULTS:
: 123

#+begin_src elisp
(setq numbers '(1 2 3 4 5))
(setq sum 0)

(dolist (number numbers sum)
  (setq sum (+ sum number)))
#+end_src

#+RESULTS:
: 15

*** ~dotimes~
Macro that executes ~body~ once for each integer from 0 (inclusive) to ~count~
(exclusive), binding ~var~ to each integer.
: (dotimes (<var> <count>)
:   <body …>)

*Note:* there has been a third (~result~) argument like in ~dolist~, but it is
deprecated, as stated in the [[info:elisp#Iteration][manual]].

#+begin_src elisp :results output
(dotimes (i 3)
  (princ i))
#+end_src

#+RESULTS:
: 012

*** ~cl-loop~
- see [[#cl-emulation]]

** Mapping
*** ~mapcar~
Applies ~fn~ to each item of ~seq~ in turn and returns a list of the results.
- like a usual /map/ function
: (mapcar <fn> <seq>)

#+begin_src elisp :results verbatim
(mapcar #'1+ '(1 2 3 4 5))
#+end_src

#+RESULTS:
: (2 3 4 5 6)

*** ~mapcan~
Like ~mapcar~, but instead of collecting the results into a list, returns a
single list with all the elements of the results (which must be lists).
- like /mapcat/ in Clojure
: (mapcan <fn> <seq>)

#+begin_src elisp :results verbatim
(mapcan (lambda (x) (list x x)) '(a b c d))
#+end_src

#+RESULTS:
: (a a b b c c d d)

*** ~mapc~
Like ~mapcar~, but used for /side-effects only/. Returns are ignored, not
collected into a list. Always returns ~seq~.
: (mapc <fn> <seq>)

#+begin_src elisp :results output
(mapc (lambda (x) (princ x)) '(a b c))
#+end_src

#+RESULTS:
: abc

*** ~mapconcat~
Applies ~fn~ to each item of ~seq~. The results must be /sequences of
characters/ (/string/, /vector/ or /list/), which will be concatenated into a
single /string/ return value.
- an optional ~separator~ (/sequence of characters/) will be inserted between
  each pair of characters
: (mapconcat <fn> <seq> <?separator>)

#+begin_src elisp :results verbatim
(mapconcat #'symbol-name '(The cat in the hat) " ")
#+end_src

#+RESULTS:
: "The cat in the hat"

#+begin_src elisp :results verbatim
(mapconcat (lambda (c) (char-to-string c)) "I like cookies" '(?. ?- ?.))
#+end_src

#+RESULTS:
: "I.-. .-.l.-.i.-.k.-.e.-. .-.c.-.o.-.o.-.k.-.i.-.e.-.s"

* Emacs-specific
** Interactive commands

To be used as a /command/ and called via a /keybinding/, a function must be made
*interactive*, e.g.:
#+begin_src elisp
(defun my-command ()
  "This is an interactive command."
  (interactive)
  (print "It worked!"))

(global-set-key (kbd "C-x c") 'my-command)
#+end_src

*Non-interactive* functions can still be called /interactively/ with a
keybinding using a /lambda function/:
#+begin_src elisp
(defun non-interactive-function ()
  (print "It worked!"))

(global-set-key (kbd "C-x c")
                (lambda () (interactive) (non-interactive-function)))
#+end_src
** Packages
*** Testing local packages
Add the directory containing the package to the ~﻿load-path~ variable. This
tells Emacs where to look for it:
: (add-to-list 'load-path "/my/package-directory")

Then, either load the package with ~use-package~:
: (use-package my-package
:   :ensure nil)
or /require/ it:
: (require 'my-package)

* Common Lisp Emulation
:PROPERTIES:
:CUSTOM_ID: cl-emulation
:END:
- see [[info:cl#Top][GNU Emacs Common Lisp Emulation]]

To use, include the package:
: (require 'cl-lib)
