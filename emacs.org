#+title: Docs/Emacs

Learning resources:
- [[https://www.youtube.com/watch?v=48JlgiBpw_I][The Absolute Beginner's Guide to Emacs]] (System Crafters)
- [[https://www.masteringemacs.org][Mastering Emacs]] (ebook by Mickey Petersen)
- [[https://emacs.stackexchange.com][emacs StackExchange]]
- [[https://www.reddit.com/r/emacs/][r/emacs]]

*Note:* keybindings are Emacs defaults, if not specified otherwise, OS-specific
details assume MacOS (which I use).

* Installing Emacs
** Yamamoto’s Mac port
https://github.com/railwaycat/homebrew-emacsmacport

: $ brew tap railwaycat/emacsmacport
: $ brew install emacs-mac  --with-modules --with-native-compilation
- add ~--with-xwidgets~ to use [[#xwidget-webkit]] in Emacs buffer

** Other Mac ports
Infos:
- [[https://www.reddit.com/r/emacs/comments/lijn31/best_emacs_port_for_mac_early_2021_edition/gn45q1h/]['Best' Emacs port for Mac - early 2021 edition?]] (reddit)
- https://emacsformacosx.com
- https://www.emacswiki.org/emacs/EmacsForMacOS

* Starting Emacs
: $ emacs
or open the app.

** in the Terminal

: $ exec emacs -nw
- ~exec~ will replace the shell with the Emacs process (may not be necessary)
- ~-nw~ runs Emacs in “no-window” mode, so it won’t try to create a graphical
  frame (ensures all keystrokes are sent to Emacs)

Use ~F10~ to open menu, arrow keys to navigate, ~ESC~ to exit

To prevent the terminal session from closing after Emacs has been closed:
: $ bash -c 'exec emacs -nw'
- starts a subshell for Emacs to replace

** with a different /init/ file

: $ mkdir ~/.emacs.d.foo
: $ touch ~/.emacs.d.foo/init.el

: $ emacs -q -l ~/.emacs.d.foo/init.el
- ~-q~ does not load the default init file
- ~-l~ loads a different config file

** as a separate GUI instance

On MacOS:
: $ open -n -a /Applications/Emacs.app --args --no-desktop
- ~-n~ opens a new instance of the app
- ~--no-desktop~ does not load a saved desktop

* Configuration

=~/.emacs/init.el= is the configuration file.

** Location for config files
Main configuration file (might have to be created first):
- =~/.emacs= or =~/.emacs.el= : old locations, *not recommended*
- =~/.emacs.d/init.el= : recommended for *MacOS* and *Windows*
- =~/.config/emacs/init.el= : recommended for *Linux*

Normally Emacs uses the environment variable ~HOME~ to find =.emacs=. If =.emacs=
is not found inside =~/= (nor =.emacs.el=), Emacs looks for =~/.emacs.d/init.el=
(which, like =~/.emacs.el=, can be byte-compiled).
- when both are available, =~/.emacs.el= is preferred over =~/.emacs=
- see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html#Find-Init][How Emacs Finds Your Init File]]

The variable ~user-init-file~ holds the location of the init file. After Emacs
found and has finished loading the init file, it sets the value of the
variable to its path.
- if it is ~nil~, no configuration was loaded
- when starting Emacs with the ~-q~ flag, the variable will still be set to
  the init file that would ordinarily be loaded, even though no init file
  was actually loaded

The variable ~user-emacs-directory~ holds the directory for per-user
Emacs-specific files.
- set ~--init-directory~ flag (Emacs 29+) to start Emacs from a different user
  directory (e.g. to use a separate config)

The file =early-init.el= (Emacs 27+) is loaded before the package system and
GUI is initialized, which makes it ideal for settings that need to be in
effect at the start of Emacs startup process.
- it must be created by the user, e.g. inside =~/.emacs.d=
- its location is determined implicitly by the value of ~user-emacs-directory~

** Compilation flags
To see which compilation flags have been set in the installation:
: C-h v system-configuration-options

** using the /Customize/ interface
Recommended for beginners who are not yet comfortable writing elisp.
: M-x customize
- supported by most built-in packages and some third-party ones
- opens up ~*Customize Group: Emacs*~ buffer with a list of /groups/

To customize a specific option:
: M-x customize-option
To customize a specific group of options:
: M-x customize-group

By default, Emacs adds customization UI configs to =init.el=. Some commands
like ~use-packages~ or loading themes may also do this. To avoid this and move
the customization variables to a separate file (and load it):
#+begin_src elisp
(setq custom-file (locate-user-emacs-file "custom-vars.el"))
(load custom-file 'noerror 'nomessage)
#+end_src

** using elisp

#+begin_src elisp
;; Setting configuration variables:
(setq true-config-variable t
      false-config-variable nil)

;; Enabling/disabling modes:
(turned-off-mode -1)
(turned-on-mode 1)
#+end_src

** Packages
*** Standard Emacs package manager (package.el)
:PROPERTIES:
:CUSTOM_ID: standard-package-manager
:END:
- [[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Package-Installation][Package Installation (GNU Emacs Manual)]]

To retrieve package listings from configured repositories:
: M-x package-list-packages
- opens a buffer to browse packages and install them from the detail page
  that opens from a hyperlink
- set ~package-install-upgrade-built-in~ to non-nil to also upgrade built-in
  packages (which will not be upgraded by default)

Important keys in package menu buffer:
- see [[info:emacs#Package Menu][emacs#Package Menu]] for a complete list

| Key | Description                                                   |
|-----+---------------------------------------------------------------|
| ~i~   | mark for installation (adds ~I~ to the line)                    |
| ~d~   | mark for deletion (adds ~D~ to the line)                        |
| ~x~   | ‘execute’ →                                                   |
|     | - downloads and installs all ~I~-marked packages and            |
|     | deletes all ~D~-marked packages, removing the marks             |
|     | - if no marks, installs or deletes package under point,       |
|     | depending on whether it is already installed or not           |
| ~U~   | mark all packages with newer available versions for upgrading |
|     | - sets ~I~ on new version and ~D~ on old installed version        |
| ~u~   | remove any ~I~ or ~D~ mark on the current line                    |
| ~h~   | quick help (usage summary)                                    |
| ~w~   | open website of package on current line                       |
| ~r~   | refresh package list (fetches it again from archive)          |

To refresh the packages catalog for updates:
: M-x package-refresh-contents

To (manually) install a package (enter name in the /minibuffer/):
: M-x package-install
- not needed with ~use-package~, when ~:ensure t~ is declared on a package

To delete a package (prompt with autocompletion):
: M-x package-delete
- Emacs 25.1+

To automatically remove all unused packages:
: M-x package-autoremove
- [[#use-package]] does not properly add packages to
  ~package-selected-packages~, which causes Emacs package manager to
  incorrectly view them as dependencies to be removed
  - see [[https://github.com/jwiegley/use-package/issues/870#issuecomment-771881305][GitHub issue]] for a fix

To upgrade (all) packages:
: M-x package-upgrade
: M-x package-upgrade-all
- will not upgrade built-in packages

By default, packages are downloaded only from the ~gnu~ /archive/. To enable
different /archive/ sources:
#+begin_src elisp
(setq package-archives
      '(("melpa" . "https://melpa.org/packages/")
        ("elpa" . "https://elpa.gnu.org/packages/")))
#+end_src

To disable all packages at startup (e.g. for debugging), set in
=early-init.el=:
: (setq package-enable-at-startup nil)
- value is ~t~ by default
*** Declarative package management
See [[#use-package]]
*** Packages outside of /archives/
See [[#package-vc]]

** Debugging

Try starting Emacs with the ~-q~ flag to prevent the /init/ file from loading
and determine if the error comes from a broken init file.

** Example configs
- https://github.com/daviwil/dotfiles/blob/master/Emacs.org
- https://github.com/olivertaylor/dotfiles/blob/master/emacs/init.el

Some common configs:
#+begin_src elisp
;; Get rid of the startup buffer
(setq inhibit-startup-message t)

;; Turn off unneeded UI elements
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Display line numbers in every buffer
(global-display-line-numbers-mode 1)

;; Use spaces instead of tabs for indentation
(indent-tabs-mode nil)

;; Retain 4 lines of overlapping text when scrolling
(setq next-screen-context-lines 4)

;; Define sentences to end with single instead of double space
(setq sentence-end-double-space nil)

#+end_src

** Starter Kits
*** Doom Emacs
https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#on-macos

*** Other
- [[https://github.com/purcell/emacs.d][.emacs.d]] (Steve Purcell)
- [[https://github.com/bbatsov/prelude][Prelude]] (Bozhidar Batzov)
- [[https://spacemacs.org][Spacemacs]]
** Improving Performance
Source: [[https://www.youtube.com/watch?v=SOxlQ7ogplA][Modern Emacs: all those new tools that make Emacs better and faster]]

- *lexical bindings* (since Emacs 28)
  - makes compiler optimization much easier.
  - can also speed up =init.el=.

  Add this line to the top of =.el= files:
  : ;;; -*- lexical-binding: t; -*-

  To enable it globally in =.org= file tangling:
  : #+PROPERTY: header-args:elisp :lexical t :tangle yes
  then add the above line to the first source block.

- *JIT native compilation* (since Emacs 28)
  - faster startup
  - speedup of 2.5 to 5 compared to corresponding byte-compiled code
  - requires ~libgccjit~

  When building Emacs, use ~--with-native-compilation~ flag.
  - see [[https://www.emacswiki.org/emacs/GccEmacs][Emacs Wiki / Gcc Emacs]] for instructions per OS

  Packages can also be compiled natively.
  - built-in ~package.el~ supports aot native compilation when installing a
    package. To enable it:
    : (setq package-native-compile t)
  - automatic with [[#straight-el]] package manager

* Version Control
** VC (Emacs’ version control system)
:PROPERTIES:
:CUSTOM_ID: package-vc
:END:

To always follow symlinks and visit the real files (for version control):
: (setq vc-follow-symlinks t)

** Backup files
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Backup.html#Backup][Backup Files]] (GNU Emacs Manual)

Emacs automatically creates backup files from visited files, by copying the
old contents (before saving the file) into a new file in the same directory
with ~~~ appended to the filename.

It gets created only the first time the file is saved from a buffer and
remains unchanged until the buffer gets killed and the file is visited
again.

To disable backup files, set variable ~make-backup-files~ to ~nil~. For files
managed by version control, ~vc-make-backup-files~ determines whether to make
backup files (~nil~ by default, since Emacs does not save backup files for
files under version control).

* Keybindings
** Modifier keys

| Notation | Key                                               |
|----------+---------------------------------------------------|
| ~C~        | CONTROL (hold)                                    |
| ~M~        | META (=> often OPT/ALT key (hold) or ESC (press)) |
| ~S~        | SHIFT                                             |

Mostly obsolete/historic keys:
| Notation | Key                                    |
|----------+----------------------------------------|
| ~s~        | SUPER (=> often CMD/LINUX/WINDOWS key) |
| ~H~        | HYPER                                  |
| ~A~        | ALT (redundant and not used)           |

- ~C~ is often used for operations with basic text units
- ~M~ is often used for operations with linguistic units

Personal mapping (MacOS):
#+begin_src elisp
(setq mac-command-modifier 'meta)          ;; left cmd = right cmd
(setq mac-right-command-modifier 'left)
(setq mac-option-modifier nil)             ;; keeps Umlauts, etc. accessible
(setq mac-right-option-modifier 'left)
(setq mac-control-modifier 'hyper)         ;; in case hyper is needed
(setq mac-right-control-modifier 'control) ;; also works for caps-lock as ctrl
#+end_src
- no OPT bindings because the interfere with European umlaut chars, etc.
- left/right CTRL = CAPS-LOCK = ~C~ (map in MacOS keyboard settings)

** Prefix keys
Common prefix keys:
- ~C-x~ is the prefix for Emacs’ primary key bindings
- ~C-c~ is the prefix for active major or minor modes and user key bindings
  - Emacs itself will never bind these, extensions should avoid binding them

See [[Keymaps]] for prefix keymaps.

** (Re)binding keys
Guides and infos:
- [[https://www.masteringemacs.org/article/mastering-key-bindings-emacs][Mastering Key Bindings in Emacs]] /(Mastering Emacs)/
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Key-Bindings.html][Customizing Key Bindings]] /(GNU Emacs Manual)/
- [[https://github.com/noctuid/evil-guide#keybindings-and-states][Keybindings and States]] /(Evil guide)/

The most important functions to set keybindings are ~define-key~ and
~global-set-key~. For [[#evil-mode]], they are ~evil-define-key~ and
~evil-define-minor-mode-key~.

To (re)bind a key in the *global keymap*:
: (keymap-global-set <key> <command>)
- ~key~ must be a string, e.g. ~"C-z"~
  - *keys* are separated by spaces
  - *modifiers* are prepended on a key with a dash, e.g. ~M-~, ~C-~, etc.
  - *special keys* can be specified in angle brackets, e.g. ~<tab>~, ~<ret>~
- ~command~ must be specified as a /constant symbol/, e.g. ~'shell~
  - otherwise, Emacs tries to evaluate it as a variable

To (re)bind a key in a given ~keymap~:
: (keymap-set <keymap> <key> <definition>)
- ~definition~ can be a …
  - *command*
  - *string* as a keyboard macro or seq. of input events
  - *keymap* to define a /prefix key/
  - *symbol* for a /function definition/ (one of the above or another symbol)
  - *cons* ~(<string> . <defn>)~ where ~defn~ is a valid definition and ~string~ is
    the menu item name (for menu names in keymaps)
  - *cons* ~(<map> . <char>)~ meaning use definition of ~char~ in keymap ~map~
  - *extended menu item definition*

To *unset/remove* a ~key~ sequence from a ~keymap~:
: (keymap-unset <keymap> <key> <?remove>)
- ~key~: a /string/ that satisfies ~key-valid-p~
- if ~remove~ is /non-nil/, removes the binding instead of unsetting it (only
  makes a difference if there is a /parent keymap/)
  - when /unsetting/ the key in ~keymap~ or just setting its definition to ~nil~,
    it will still /shadow/ the same key in the parent keymap
  - ~remove~ allows the parent keymap to still use its own binding for the
    same key

Keymaps are not constructed until the mode is loaded for the first time in a
session, so use a *mode hook* to delay evaluation of the binding code, e.g.:
#+begin_src elisp
(add-hook 'texinfo-mode-hook
          (lambda ()
            (keymap-set texinfo-mode-map "C-c p" 'backward-paragraph)
            (keymap-set texinfo-mode-map "C-c n" 'forward-paragraph)
            (keymap-set texinfo-mode-map "C-c C-x x" nil))) ; removes the bind.
#+end_src

To *specify key sequences* for /low-level functions/ (such as ~define-key~ and
~global-set-key~):
: (kbd <string>)
- e.g. ~(kbd "C-z")~

To define a ~key~ (sequence) as a ~def~'inition in a ~keymap~:
: (define-key <keymap> <key> <definition> <?remove>)
- ~key~ can be a /string/ or a /vector/ of symbols and characters (representing a
  sequence of keystrokes and events)
  - non-ASCII chars with codes > 127 can be represented by /vectors/
  - see ~kbd~ to define key sequences conveniently
- *Vectors* with special meaning:
  - ~[remap <command>]~ remaps any key binding to ~command~
  - ~[t]~ creates a default definition, which applies to any event with no
    other definition in ~keymap~
- ~definition~ → see ~keymap-set~
- ~remove~: see ~keymap-unset~

To give a ~key~ a /global binding/ as ~command~:
: (global-set-key <key> <command>)
- *legacy function* (use ~keymap-global-set~ instead)

Keybinding packages:
- [[#general.el]] is a more convenient, unified interface for key definitions
  that supports additional functionality (e.g. for /vim-style/ keybindings
  with a leader key)

** Keymaps
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Keymaps.html][Keymaps]] /(GNU Emacs Manual: Customizing Key Bindings)/
- [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Keymaps.html][Keymaps]] /(GNU Emacs Manual: Emacs Lisp)/

The *global keymap* is always in effect.

To rebind keys in the /global keymap/:
: M-x keymap-global-set

A *local keymap* is used by major and minor modes to provide custom bindings.

*Keymap overrides:*
- /local keymaps/ override /global keymap/ bindings
- /minor mode/ local keymaps override /major mode/ ones
- /portions of text/ in a buffer can specify their own keymaps, which override
  all others

*Prefix keymaps* store bindings for multiple events (as a /key sequence/) by
/chaining/ keymaps. The first keymap defines the /prefix key/ by looking up the
second event in the next keymap, which may itself point to another keymap
for the third event and so on.
- the definition can also be a /Lisp symbol/ whose function definition is the
  following keymap, the effect is the same
  - e.g. in the /global map/, ~C-x~ is bound to the symbol ~Control-X-prefix~,
    whose function definition is the keymap for ~C-x~ commands

If a /local keymap/ defines a /prefix key/ that is already being used as a
prefix key (e.g. ~C-c~), both /prefix keymaps/ will effectively *combine* in key
lookups, keeping the usual precedence for overrides.

Variable names for some common prefix keymaps:
- ~ctl-x-map~ is for characters following ~C-x~
- ~help-map~ is for characters following ~C-h~
- ~esc-map~ is for characters following ~ESC~
  - thus, all *Meta* characters are actually defined by this map
- ~ctl-x-4-map~ is for characters following ~C-x 4~
- ~mode-specific-map~ is for characters following ~C-c~
- ~project-prefix-map~ is for characters following ~C-x p~
  - used for project-related commands

* Terminology
Keybindings:
- *key sequence* (or just /key/) → sequence of keyboard/mouse actions
- *complete key* → one or more /key sequences/ that invoke a /command/
- *prefix key* → /key sequence/ that is not a /complete key/

Editor:
- *frame* → Emacs GUI window or terminal area
- *window* → subdivision in a /frame/
- *echo area* → line at the bottom of the /frame/
  - displays infos, prompts / /minibuffer/, etc.

Text editing:
- *point* → location of the caret/cursor in the /buffer/
- *mark* → fixed /point/
- *region* → contiguous text range from /mark/ to /point/
- *visual line* / *screen line* → text line as it appears (before a wrap)
- *logical line* → text line as a syntactic unit (disregarding any wraps)

Text units:
- *word* → string of text that ends on a non-alphabetic char (?) or (?)
- *sentence* → defined by the variables ~sentence-end-double-space~,
  ~sentence-end-without-period~ and ~sentence-end-without-space~
  - by default, a string of text that ends with a period followed by two
    spaces
- *paragraph* → defined by the variables ~paragraph-start~, ~paragraph-separate~ and
  ~use-hard-newlines~
  - by default, a newline-delimited block of text
  - ~M-x paragraph-indent-minor-mode~ to mark the beginning by leading spaces
- *page* → anything delimited by the character defined in the variable
  ~page-delimiter~

[[Modes]]:
- *mode* → collection of functionality that applies to one or more buffers
- *major mode* → /mode/ that applies to a single buffer
- *minor mode* → /mode/ that may apply to multiple buffers

** single vs double spacing after sentences
- https://www.gnu.org/software/emacs/manual/html_node/emacs/Sentences.html
- [[https://emacs.stackexchange.com/questions/7195/how-can-i-normalize-sentence-endings][How can I normalize sentence-endings?]]
- [[https://emacs.stackexchange.com/questions/2766/any-functionality-differences-using-a-two-space-vs-one-space-convention-at-the-e/2771#2771][Any functionality differences using a two-space vs one-space convention at the end of a sentence?]]

To switch to single-spacing:
: (setq sentence-end-double-space nil)

* Commands
** General

Enter and execute a command:
: M-x execute-extended-command
- press ~TAB~ to list all commands starting with the input text

For a restricted list of commands relevant to the current /buffer/:
: M-S-x execute-extended-command-for-buffer

Exit Emacs:
: C-x C-c : save-buffers-kill-terminal

Exit out of prompts, regions, prefix arguments and return to just one
window:
: ESC ESC ESC
Interrupt command (maybe press multiple times):
: C-g : keyboard-quit

Repeat the previous command:
: C-x z (z …) : repeat
- just ~z~ to repeat multiple times
Repeat a command ~n~ times:
: C-u <n> <cmd> : universal-argument
- e.g. ~C-u 8 C-f~ to move cursor forward 8×
See also [[#repeat-mode]]

Begin a /negative/ numeric argument for the next command:
: C-M-- / C-- / M-- : negative-argument

** Help / Infos
Get help/description:
: C-h …
- ~a~: ~apropos-command~ (regex search for Lisp symbols)
- ~i~: ~info~ (INFO mode / Emacs manual)
- ~k~: ~describe-key~ (lookup a key binding)
- ~v~: ~describe-variable~
- ~f~: ~describe-function~
- ~o~: ~describe-symbol~
- ~m~: ~describe-mode~ (lookup (current) mode)
- ~C~: ~describe-coding-system~ (display infos about coding system)
- ~F~: ~Info-goto-emacs-command-node~ (find documentation for command)
- ~R~: ~info-display-manual~ (display info buffer for selected manual)

Get information about prefixed bindings (global and for Major mode):
: C-x C-h : C-c C-h : …
or ~C-h m~ for just Major mode bindings and other infos

To see a full list of all Unicode categories:
: M-x describe-categories
- (?) what is this

To open the /man page/ for a terminal command in Emacs:
: M-x man

Show list of all bindings:
: M-x describe-bindings

See a list of the active keymaps:
: evaluate (current-active-maps)

Show Emacs uptime counter:
: M-x emacs-uptime
Show Emacs version:
: M-x emacs-version

Keyboard-friendly menu bar:
: M-`
- ? does this work

Info mode navigation:
| Key   | Action                                  |
|-------+-----------------------------------------|
| ~[~ · ~]~ | Previous / next section                 |
| ~l~ · ~r~ | Go back / forward in viewing history    |
| ~n~ · ~p~ | Previous / next section (same level)    |
| ~u~     | Parent section                          |
| ~SPC~   | Scroll one screen at a time             |
| ~TAB~   | Cycle through cross-references & links  |
| ~RET~   | Open selected link                      |
| ~m~     | Prompt for a menu item name and open it |
| ~q~     | Close INFO                              |
| ~s~     | Search INFO                             |

Search inside an Info-mode manual:
: M-x Info-search
- recommended keybindings for prev/next result:
  : (keymap-set Info-mode-map "M-{" #'Info-search-backward)
  : (keymap-set Info-mode-map "M-}" #'Info-search-next)

Link to a specific page in Info-mode:
: M-x org-store-link
: C-c C-l : org-insert-link

** Modes

A *major mode* provides /core functionality/ for the current buffer.
- activated by specific /file extensions/ the buffer reacts to or with
  specific /commands/
- displayed in the /mode line/ (e.g. ~Org~ for /Org mode/)
- ~Fundamental~ is the /default mode/ that has no special functionality

A *minor mode* provides /additional functionality/, independent of a specific
buffer.
- can be activated in a /single buffer/ or /globally/
- e.g. for workflow customizations, appearance, etc.

A file’s *major mode is detected* (in order) by:
- *[[File-local variables]]* can have ~mode~ values that Emacs will detect
- *Program loader directives* /(shebangs)/ that begin with ~#!~
  - Emacs will figure out the major mode if available
  - the variable ~interpreter-mode-alist~ lists all program loaders Emacs can
    detect
- *Magic mode detection* checks if the beginning of the file matches a pattern
  stored in the variable ~magic-mode-alist~
  - applies if filename or extension cannot be predicted ahead of time
- *Automatic mode detection* through file extensions, file names or all or
  parts of a file’s path
  - the variable ~auto-mode-alist~ lists all patterns and associated modes
    Emacs can detect

** Windows
Select another window (in cyclic ordering):
: C-x o : other-window

Delete current /(active)/ window:
: C-x 0 : delete-window
Delete all windows except the /active window/:
: C-x 1 : delete-other-windows
Split /active window/ vertically:
: C-x 2 : split-window-below
Split /active window/ horizontally:
: C-x 3 : split-window-right

Make selected window ~delta~ lines /taller/ (or columns /wider/, if ~horizontal~ or
/smaller/ if ~delta~ is /negative/):
: C-x ^ : (enlarge-window <delta> <?horizontal>)

Balance the sizes of windows:
: balance-windows

Toggle popups (e.g. for help):
: C-` : +popup/toggle
- requires ~popup.el~

Undo changes in window arrangement:
- see [[#winner-mode]]

---

Control how buffers are opened in windows:
: (add-to-list 'display-buffer-alist '(…))

Example:
#+begin_src elisp
(add-to-list 'display-buffer-alist
	     '("^\\*eldoc" display-buffer-at-bottom
	       (window-height . 4)))
#+end_src

** Frames
To create a new /frame/ (OS-level window):
: M-x make-frame-command

** Buffers
Buffers need not be for files, but can also be /transient buffers/ for e.g.
network I/O or text processing (/scratch/, /help/, etc.).

Show buffer list:
: C-x C-b : list-buffers
Open dired buffer manager:
: M-x ibuffer
- recommended to use with keybinding of ~list-buffer~:
  ~(global-set-key [remap list-buffers] 'ibuffer)~

Switch to previous/next buffer:
: C-x ←/→ : previous-buffer / next-buffer
Switch to buffer by name:
: C-x b : consult-buffer

Kill buffer (current buffer or named):
: C-x k : kill-buffer
- according to “Mastering Emacs”, it is normal to have hundreds or even
  thousands of buffers open, so this is not as important as it seems

Reload buffer (replaces buffer with file on disk, undoing all changes):
: M-x revert-buffer

Completion frameworks for buffer switching:
- [[#icomplete][Icomplete / IDO / FIDO]]

*** Mini buffer / minibuffer
Interactive buffer that appears in the /echo area/ and displays errors and
general information or acts as an interface (e.g. for buffer selection or
input of pathnames).

*** Indirect buffer
:PROPERTIES:
:CUSTOM_ID: indirect-buffer
:END:
An indirect buffer contains the entire buffer, but narrowed down to the
selected subtree.

Editing the indirect buffer will also change the original buffer, without
affecting its visibility.

More infos: [[info:emacs#Indirect Buffers][emacs#Indirect Buffers]]

** Files

Load file into buffer:
: C-x C-f : find-file

Save buffer to file:
: C-x C-s : save-buffer
Write buffer to different file /(save as…)/:
: C-x C-w : write-file
Save all modified file-visiting buffers:
: C-x s : save-some-buffers
-  will ask, in turn, for each unsaved file

*** Coding system

Check the variable ~buffer-file-coding-system~ to see the coding system used
by the current buffer.
- can also be checked with ~C-h C <RET>~, but not if ~fido-mode~ is active
- alternatively, click the leftmost symbol in the /modeline/

To change the coding system in use (select from list):
: C-x RET r : revert-buffer-with-coding-system
- reverts the buffer!
- buffer must be saved to make changes permanent

*** Line endings

Line ending indicators in the /modeline/ (e.g. in ~U:**-~):
| Indicator | Style               |
|-----------+---------------------|
| ~:~         | UNIX-style          |
| ~(DOS)~     | DOS                 |
| ~(Mac)~     | Macintosh (pre-OSX) |

*** File-local variables
Enabled per file if present in the file.
- will *not* overwrite variables globally

As headers:
: -*- mode: mode-name-here; my-variable: value -*-
or footers:
: Local Variables:
: mode: mode-name-here
: my-variable: value
: End:

Commented lines (with the /major mode’s/ comment syntax) will work too.
*** File history
To remember recently edited files:
- [[#recentf-mode]]

To remember the last place visited in a file:
- [[#save-place-mode]]

To automatically revert a buffer when the underlying file has changed:
- [[#auto-revert-mode]]
*** Search in files
Recursively grep for ~regexp~ in ~files~ (shell pattern) from root ~dir~:
: (rgrep <regexp>  <?files> <?dir> <?confirm>)
- e.g. use in [[#dired]]
- to jump to the first/next occurrence:
  : C-x ` : next-error

** History of input
To save the history of commands, etc., see:
[[#savehist-mode]]

Show a previously entered command in its elisp form in the redo-buffer:
: C-x ESC ESC : repeat-complex-command
- can be used to modify a previously executed command

** Shell commands

Call shell command and print output:
: M-! : shell-command
- prints to =*Shell Command Output*= and (for short output) the /echo area/
- ~C-u M-!~ inserts output into the current buffer

Call shell command /asynchronously/ and print output:
: M-& : async-shell-command
- prints to =*Async Shell Command*= and (for short output) the /echo area/
- ~C-u M-&~ inserts output into the current buffer
- prefer ~M-x compile~ for long-running tasks

Pipe /region/ to shell command:
: M-| : shell-command-on-region
- ~C-u M-|~ replaces the /region/
- e.g. use with ~wc~ to show word count

---

Run a command and track errors:
: M-x compile
- e.g. for unit tests, compiling, scripts, etc.
- ~M-g M-n~ / ~M-g M-p~ jumps to the next/prev error (global)

Re-run the last command:
: g : M-x recompile

Compile in the current project:
: C-x p c

** Browsing

*** EWW: Emacs Web Wowser
: M-x eww
- ~q~ to quit
- ~l~ / ~r~ to browse backward/forward in history
- ~TAB~ / ~S-TAB~ to cycle to next/prev hyperlink
- see chapter in “Mastering Emacs” for more infos

Browse URL in external browser:
: M-x browse-url
- the variables ~browse-url-browser-function~, ~browse-url-handlers~, and
  ~browse-url-default-handlers~ determine which browser function to use

*** xwidget-webkit
:PROPERTIES:
:CUSTOM_ID: xwidget-webkit
:END:
GUI browser using webkit (for MacOS).
- requires Emacs compilation flag ~--with-xwidgets~

: M-x xwidget-webkit-browse-url

** Diagnostics
_Emacs profiler_

Records events in Emacs and reports a sorted breakdown of *CPU and/or memory
usage* by each function that has been called while recording.

Use in this order:
: M-x profiler-start
: M-x profiler-stop
: M-x profiler-report

Explanation and examples:
- [[https://www.youtube.com/watch?v=eyDGeVvnHgo][Why is My Emacs Slow?]] (YouTube)

** Other things

Show a calendar:
: M-x calendar

Weird screensaver:
: M-x zone
Text adventure game:
: M-x dunnet
Tetris/Pong/Snake clone:
: M-x tetris
: M-x pong
: M-x snake
Psychotherapist:
: M-x doctor
Tower of Hanoi:
: M-x hanoi : M-x hanoi-unix : M-x hanoi-unix-64
Game of Life:
: M-x life
- initial patterns in variable ~life-patterns~

Also see:
- https://www.masteringemacs.org/article/fun-games-in-emacs
  
* Text editing
** General
*** Line wrapping /(truncation, filling)/
Lines are (usually) not continuous but are broken up by hard
line-breaks.
- ~C-x f : set-fill-column~ sets the /fill column width/ *(buffer-local)*

Activate automatic breaking/filling of lines if they exceed the max.
character limit:
: M-x auto-fill-mode

Correctly /break/refill/ a continuous paragraph into lines:
: M-q : fill-paragraph / org-fill-paragraph
- ~C-u M-q~ will attempt to justify the paragraph
- Emacs will *not hyphenate* words

The *fill prefix* is a sequence of characters that should appear at
the start of any line that belongs to the group of lines which is to
be /filled/.
- ~C-x . : set-fill-prefix~ sets the /fill prefix/
- e.g. ~`;; `~ as a prefix lets Emacs fill only lines that belong to a
  comment block in elisp
- if a prefixed line exceeds the /fill column width/, Emacs will
  automatically insert the prefix on all broken/filled lines

If a line /is/ continuous, it can wrap into multiple /visual lines/ or
stretch out in full horizontally, which can be toggled using:
: M-x toggle-truncate-lines
- truncates lines by character
- truncation might conflict with ~visual-line-mode~, which wraps by word
  boundary instead

*** Line movement
By default, Emacs movement is by *visual lines*.
- to change this, set ~line-move-visual~ to ~nil~
- [[#evil-mode][evil mode]] moves by /logical lines/ instead, as /Vi(m)/ does

The /minor mode/ ~visual-line-mode~ (disabled by default) makes Emacs behave
more like a traditional word processor, e.g. by wrapping by word boundary
and disabling the fringe indicators.
- will also change some movement and editing commands to act on /visual
  lines/ instead
- hard line-breaks will still be preserved and can be distinguished by a
  line number on each line instead of just the first one
- set ~global-visual-line-mode~ variable to enable globally

*** Line numbers

To enable line numbers globally, call in =init.el=:
: (global-display-line-numbers-mode)
- configure options with ~M-x customize-group RET display-line-numbers~
- for a single buffer, call ~M-x display-line-numbers-mode~

** Text Movement

To repeat movements ~n~ times, type ~C-{n} <cmd>~ or the longer ~C-u <n> <cmd>~ to
enter larger ~n~.

Move by character:
:    C-p    : previous-line
: C-b · C-f : backward-char · forward-char
:    C-n    : next-line
: (or use arrow keys)
- wraps around lines

Move to start of previous word / before next word:
: M-b / M ← : left-word
: M-f / M → : right-word

Move to start of / end of /paragraph/:
: M-{ : backward-paragraph
: M-} : forward-paragraph
- will move between bullets in /org-mode/ if /point/ is on a bullet

Jump to the first non-whitespace character on the current line:
: M-m : back-to-indentation

Jump to beginning/end of line:
: C-a / Home : move-beginning-of-line
: C-e / End  : move-end-of-line
Jump to beginning/end of sentence (must be separated by 2 spaces):
: M-a : backward-sentence
: M-e : forward-sentence

To jump to a specific place in buffer, see [[#imenu]].

** Window/Buffer Movement (scrolling, etc.)

Go to line:
: M-g M-g / M-g g : (goto-line <n>)
Go to column:
: M-g TAB : (move-to-column <n>)
Go to character position (absolute pos. from beginning of buffer):
: M-g c : (goto-char <n>)

Scroll window so that current line is in the middle/top/bottom of the
window:
: C-l : recenter-top-bottom
Re-position the point to the middle/top/bottom left of the window:
: M-r : move-to-window-line-top-bottom
Make current definition and/or comment visible:
: C-M-l : reposition-window
- tries to scroll comments or definitions into view

Scroll window page-wise further/back:
: C-v / SPC (read-only) / PgDown : scroll-up-command
: M-v / DEL (read-only) / PgUp   : scroll-down-command
- set ~next-screen-context-lines~ variable to retain /n/ lines of overlapping
  text when scrolling
- use ~C-<n>~ or ~C-u <n>~ before the command to scroll ~n~ lines further/back

Scroll /other/ window page-wise further/back:
: C-M-v : scroll-other-window
: C-M-S-v : scroll-other-window-down
- useful e.g. for scrolling help buffers
- ~C-M-- C-M-v~ may be easier to type for reverse scroll

Jump to start/end of buffer:
: M-< / C-Home : beginning-of-buffer
: M-> / C-End  : end-of-buffer
- sets a /mark/ on the previous cursor position (to jump back to)

Scroll left/right:
: C-x < / C-<next> : scroll-left
: C-x > / C-<prior> : scroll-right
: S-<wheel>  (since Emacs 28)
- *disabled* by default, because confusing to beginners
  - see: [[https://stackoverflow.com/questions/35437652/how-to-scroll-horizontally-in-emacs][How to scroll horizontally in emacs?]]

Set/fix the /goal column/ (horizontal position for the /point/):
: C-x C-n : set-goal-column
- when moving from one line to the next, Emacs will try to set the point on
  the /goal column/ instead of the one the /point/ is currently at
- *disabled* by default, because confusing to beginners
- ~C-u C-x C-n~ resets the goal column

** Mark / Select region

*Transient Mark Mode (TMM)*: minor mode for activating the /mark/ and
highlighting the /region/ (on by default)

Set a *mark* (/activates/ it; press again to /deactivate/ the mark):
: C-SPC / C-@ : set-mark-command
- or press ~C-g~ which also /deactivates/ the mark
- the mark is /not/ removed after deactivating it
- each mark is saved in the /mark ring/

Mark while moving the cursor /(conventional shift-selection)/:
: S+<left>, …

Jump to a /marked/ position:
: C-u C-SPC
- repeated calls go further back the /mark ring/
- does /not/ work across buffers

Exchange /point/ and /mark/ and /reactivate/ the last /region/:
: C-x C-x : exchange-point-and-mark

- *mark ring:* contains all marks that have been set.
- *global mark ring:* also works across buffer boundaries

** Insert / Indent
*** Lines (new/split/join)
Insert a /newline/ and move to left margin of the new line:
: RET : newline

Insert a /newline/ after the /point/ (keeping cursor position):
: C-o : open-line
- (?) might insert a comment

Split line after /point/, maintaining /column offset/ (and cursor position):
: C-M-o : split-line
- uncommon in daily use
- inserts /fill-prefix/ on the new line (if set)

Break line at /point/ and indent (respecting /fill prefix/ as in comments):
: C-M-j / M-j : default-indent-new-line
- calls ~comment-line-break-function~ if comment syntax is defined

Join the line the /point/ is on with the line above:
: M-^ : delete-indentation
- use ~C-u M-^~ to join with the line below instead
- trims whitespace between lines (keeping one space for non-blank lines)
- removes /fill-prefixes/ from joined lines

Delete all blank lines after /point/:
: C-x C-o : delete-blank-lines
- will /not/ remove the line the /point/ is on
- also removes lines with only tabs or whitespace

*** Indentation
Indent the current /line/ or /region/ (or insert a tab):
: TAB : indent-for-tab-command
- moves to the right indentation level in code

Indent (?outdent) a /region/:
: C-M-\ : indent-region

To manually increase/decrease indentation of a /region/:
: C-x TAB : indent-rigidly
- always starts from the /mark/, even if the /region/ is not visible

Also see:
- [[#electric-indent-mode]]

*** Overwrite text
Toggle ~overwrite-mode~ to overwrite each char under cursor:
: <insert> : overwrite-mode

** Comments

(Un-)comment DWIM /(Do What I Mean)/:
: M-; : comment-dwim
- Emacs tries to guess what the user tries to do
- on a non-empty line, inserts a comment at the end of the line
- on an empty line, comments the whole line
- with a /region/, comments out the selected text (or multiple lines)

(Un-)comment non-empty /line/ at /point/:
: C-x C-; : comment-line
- moves /point/ to the next line
- also works with negative and digit arguments/modifiers

Comment the /region/, but as a box:
: M-x comment-box

*Comment variables* to set up in a major mode:
| Variable        | Purpose                                        |
|-----------------+------------------------------------------------|
| ~comment-style~   | Style of comment to use                        |
| ~comment-styles~  | Association list of available comment styles   |
| ~comment-start~   | Character(s) to mark start of comment          |
| ~comment-end~     | Character(s) to mark end of comment            |
| ~comment-padding~ | Padding used (usually a space) between comment |
|                 | character(s) and the text                      |

** Delete

*Note:* /kill/ commands retain removed text in the *kill ring*, while /delete/
commands do not.

Delete char before cursor:
: DEL : backward-delete-char-untabify
Delete char under cursor:
: C-d : (delete-char <n> <?KILLFLAG>)
- as a command, kills ~n~ following or (if negative) previous chars

Kill backward until word beginning:
: M-DEL : backward-kill-word
Kill forward until word ending:
: M-d : kill-word

Kill until line ending:
: C-k : kill-line
- if cursor is at line ending, deletes the next line
- delete multiple lines with ~C-u <n> C-k~

Kill the current line:
: C-S-<backspace> : kill-whole-line

Kill until end of sentence:
: M-k : kill-sentence
** Copy / Paste

Kill /(cut)/ text between point and mark:
: C-w : kill-region
- deletes up to mark

Save /(copy)/ the region as if it was /killed/ but don’t kill it:
: M-w : kill-ring-save
- copies up to mark

Reinsert /(paste)/ the most recent /kill/ or /yank/:
: C-y : yank

Re-insert previously /killed/ text by cycling through /kill ring/:
: M-y : yank-pop
- by default, will show the kill history in the minibuffer for selection
- if ~C-y~ has been typed immediately before the command, the pasted text will
  be replaced with the item that comes before it in the /kill ring/

** Undo / Redo
Undo changes:
: C-/  /  C-_  /  C-x u  : undo

Redo changes (undo the ~undo~ call):
: C-g <undo>
- can be any other command that breaks a repeated ~undo~ call, which adds the
  undone items as /redo records/ to the *undo ring* so that they can be /redone/
  by the next ~undo~ calls

Classic /redo/ behavior /(Emacs 28+)/:
: C-? / C-M-_ : undo-redo
- use after normal ~undo~ or ~undo-only~ (which will not /redo/ undo)
- won’t push the “redo” step to the /undo ring/

** Transpose
Emacs will swap two syntactic units surrounding the /point/ based on its
current position.
- negative arguments also work, but the behaviour is a bit complicated

Transpose characters:
: C-t : transpose-chars
Transpose words:
: M-t : transpose-words

Transpose lines:
: C-x C-t : transpose-lines

Transpose paragraphs:
: M-x transpose-paragraphs
Transpose sentences:
: M-x transpose-sentences
** Changing Case

Uppercase/Lowercase the region:
: C-x C-u : upcase-region
: C-x C-l : downcase-region
- disabled by default, but actually not confusing at all

Capitalize the region (every word in it):
: M-x upcase-initials-region

Capitalize/Uppercase/Lowercase the next word:
: M-c : capitalize-word
: M-u : upcase-word
: M-l : downcase-word
- work with digit and negative commands
** Sorting
Sort lines in region lexicographically by the ~arg~'th field in each line:
: (sort-fields <field> <beg> <end>)
Sort lines in region numerically by the ~arg~'th field in each line:
: (sort-numeric-fields <field> <beg> <end>)

** imenu
:PROPERTIES:
:CUSTOM_ID: imenu
:END:

Jump to a place in the buffer chosen from menu (e.g. specific symbols):
: M-g i : imenu
- sets a mark on the previous position
- suggests the symbol at /point/ to jump to its definition

** S-expressions
These commands work in any /major mode/ and on any /balanced expression/
(which can span multiple lines):
- *strings:* ~"…"~, ~'…'~
- *brackets:* ~[…]~, ~(…)~, ~{…}~, ~<…>~
- also depends on the /syntax table/ of the particular /major mode/
- for any /unbalanced expression/ (like regular text), they behave like the
  commands that act on /words/

Move forward/backward by /s-expression/:
: C-M-f : forward-sexp
: C-M-b : backward-sexp

Move down/into the nearest /list/:
: C-M-d : down-list
Move up/out of the current /list/ (or /string/):
: C-M-u : backward-up-list

Move to next/previous /list/:
: C-M-n : forward-list
: C-M-p : backward-list

Delete the /s-expression/ following the /point/:
: C-M-k : kill-sexp

Transpose two /s-expressions/:
: C-M-t : transpose-sexps

Complete the text/symbol at /point/:
: C-M-i : completion-at-point

To check for unbalanced parentheses:
: M-x check-parens

To jump to a specific symbol (named or at /point/), see [[#imenu]].
** Search / Replace
*** isearch
:PROPERTIES:
:CUSTOM_ID: isearch
:END:

Search in buffer forwards/backwards:
: C-r : isearch-backward
: C-s : isearch-forward
… with regex:
: C-M-r : isearch-backward-regexp
: C-M-s : isearch-forward-regexp

_isearch-mode bindings:_

- repeat ~C-r~ or ~C-s~ : go to next match in backward/forward direction
- ~M-s M-<  /  M-s M->~ : go to first/last match
- ~RET~ : exit search, leaving /point/ at location found
- ~C-g~ : return the /point/ to the starting position or, if the characters in
  the search string don’t match, remove those characters
- ~C-j~ (or type ~LFD~) : match end of the line
- ~C-M-d~ : remove one character in the search string
  - triggers the dictionary in MacOS; remap ~isearch-del-char~
- ~M-e~ : activate minibuffer edit mode for search string
  - confirm with ~RET~ or ~C-s~ / ~C-r~ to continue search
  - enables usage of more editing commands in minibuffer
- see [[#regex-syntax]] for regex reference
- … (see docs)

_Search for /things/:_

Specific search for /things/ at point (when in isearch):
- ~… C-w~ : search /word/ or (sometimes) /character/ at point (Emacs decides →
  heuristic search)
- ~… C-M-w~ : search /symbol/ at point
- ~… C-M-y~ : search /one character/ at a time
  - ~C-M-d~ to remove the character from search string (remap in MacOS)
- … (see docs)
- some can be used with numeric args to add more /things/

General search for /thing/ at point /(since Emacs 28)/:
: M-s M-. : isearch-forward-thing-at-point
- works for e.g. symbol, list, sexp, defun, number, filename, url, email,
  uuid, word, sentence, whitespace, line, page
- also works on regions
- the order of things being searched can be modified, e.g.:
  : (setq isearch-forward-thing-at-point '(region url email symbol sexp))

_Useful settings:_

Remove “pause” when changing directions:
: (setq isearch-repeat-on-direction-change t)
Do not wrap isearch when reaching the end of a buffer:
: (setq isearch-wrap-pause nil)
Set max length of search ring (default: 16):
: (setq search-ring-max 4)
Do not allow scrolling commands (e.g. ~C-v~) to exit isearch:
: (setq isearch-allow-scroll t)
- mouse scrolling will still exit

*** Replace commands

*NOTE:* Query commands also work inside [[#isearch]] to replace matches.

Replace (non-regex) ~from-str~ with ~to-str~ (in the current /region/):
: M-x (replace-string <from-str> <to-str>
:      <?delimited> <?start> <?end> <?backward> <?region-noncontiguous?>)
- if no /region/ (selection) is visible, searches the entire /buffer/

Replace (regex) things after point matching ~regexp~ with ~to-str~:
: M-x (replace-regexp <regexp> <to-str>
:      <?delimited> <?start> <?end> <?backward> <?region-noncontiguous?>)
- if no /region/ (selection) is visible, searches the entire /buffer/
- see [[#regex-syntax]] for reference


Replace (non-regex) queried occurrences of ~from-str~ with ~to-str~:
: M-% (query-replace <from-str> <to-str>
:      <?delimited> <?start> <?end> <?backward> <?region-noncontiguous?>)

Replace (regex) queried things after point matching ~regexp~ with ~to-str~:
: C-M-% (query-replace-regexp <regexp> <to-str>
:        <?delimited> <?start> <?end> <?backward> <?region-noncontiguous?>)
- type replacement string after query, then either:
  - replace match with ~SPC~ / ~y~
  - replace all remaining matches with ~!~ (no questions asked)
  - skip or go to next match with ~DEL~ / ~n~
  - move back to previous match with ~^~
  - undo replacement with ~u~, undo all with ~U~
  - exit with ~RET~ / ~q~, replace one and exit with ~.~
  - for more directions, type ~?~ / ~C-h~
- see [[#regex-syntax]] for reference

*** Regex syntax for replace commands
:PROPERTIES:
:CUSTOM_ID: regex-syntax
:END:

Also see [[https://www.emacswiki.org/emacs/RegularExpression][Emacs Wiki]] for a regex reference.

*Query string* syntax:
- *meta characters* need to be escaped:
  - ~\(…\)~ for capture-groups, ~\{…\}~ for repetitions
  - ~\|~ for alternatives
- interactively, matching ~\n~ will not work; use ~C-q C-j~ instead
- to match a *tab character* ~\t~, press ~TAB~
- *character classes* are different → see syntax class tables below
- emacs-specific:
  - ~\<, \>~ matches beginning/end of word
  - ~\_<, \_>~ matches beginning/end of symbol
  - ~\scode~ matches any character whose syntax table code is ~code~
  - ~\Scode~ matches any character whose syntax table code is *not* ~code~
- missing:
  - no /lookahead/ or /lookbehind/
  - no /possessive quantifiers/ such as ~?+, *+, ++~

*Replace string* syntax:
- type ~\1~ , ~\2~ , … to refer to capture-groups
- type ~\&~ to refer to the whole match
- type Elisp expressions with unquote ~\,…~ e.g.:
  - ~\,(upcase \&)~ converts the match to uppercase
  - ~\,(* 2 \#1)~ replaces a numerical match with its double
  - type ~\#1~ , ~\#&~ etc. to cast the match as a /number/
- type ~\?~ to prompt for text input 
- also see https://susam.net/maze/elisp-in-replacement-string.html

*Syntax/character classes* to use with ~\scode~ or ~\Scode~:
| ~-~ | whitespace character      | ~/~ | character quote character |
| ~w~ | word constituent          | ~$~ | paired delimiter          |
| ~_~ | symbol constituent        | ~'~ | expression prefix         |
| ~.~ | punctuation character     | ~<~ | comment starter           |
| ~(~ | open delimiter character  | ~>~ | comment ender             |
| ~)~ | close delimiter character | ~!~ | generic comment delimiter |
| ~"~ | string quote character    | ~\vbar~ | generic string delimiter  |
| ~\~ | escape character          |   |                           |
- also see ~C-h s~ for the current [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Tables.html][syntax table]], which depends on the mode
- [[https://www.emacswiki.org/emacs/RegularExpression][Source]]

*Syntax/character classes*, square-bracket-delimited:
- must be wrapped in outer brackets
  - e.g. ~[[:space:]]~, ~[[:space:]]*~, ~[[:upper:]\|[:digit:]\.]~
| ~[:digit:]~    | a digit, same as ~[0-9]~                                  |
| ~[:alpha:]~    | a letter (an alphabetic character)                      |
| ~[:alnum:]~    | a letter or a digit (an alphanumeric character)         |
| ~[:upper:]~    | a letter in uppercase                                   |
| ~[:lower:]~    | a letter in lowercase                                   |
| ~[:graph:]~    | a visible character                                     |
| ~[:print:]~    | a visible character plus the space character            |
| ~[:space:]~    | a whitespace character, as defined by the syntax table, |
|              | but typically ~[ \t\r\n\v\f ]~,                           |
|              | which includes the newline character                    |
| ~[:blank:]~    | a space or tab character                                |
| ~[:xdigit:]~   | an hexadecimal digit                                    |
| ~[:cntrl:]~    | a control character                                     |
| ~[:ascii:]~    | an ascii character                                      |
| ~[:nonascii:]~ | any non ascii character                                 |
- see [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Char-Classes.html][Emacs manual]] for all syntax classes
- [[https://www.emacswiki.org/emacs/RegularExpression][Source]]

** Other text objects

Move to beginning/end of /defun/ (loosely for some kind of block in
programming languages or text):
: C-M-a : beginning-of-defun
: C-M-e : end-of-defun

Move forward/backward one /page/:
: C-x ] : forward-page
: C-x [ : backward-page
* Appearance
** Faces
Different styles applied to text are called *faces*. Each face can specify
various *face attributes*, such as the /font/, /height/, /weight/, /slant/, /foreground/
and /background color/, and /underlining/ or /overlining/.

By default, Emacs automatically chooses which set of /face attributes/ to
display on each /frame/, based on the frame’s current /background color/.
- override by setting ~frame-background-mode~ (see variable docs)

*Special faces:*
- ~default~: the default for displaying text
  - its /background color/ is also used as the frame’s background color
- ~cursor~: used to draw the text /cursor/ (on graphical displays)
  - attributes other than /background color/ have no effect
  - /foreground color/ is taken from the /backgr. color/ of the underlying text

To inspect a /face/ at /point/:
: M-x describe-face

To see what faces are currently defined:
: M-x list-faces-display

To set a specific /face attribute/:
: (set-face-attribute <face> <frame> <attr-value pair …>)
- if ~<frame>~ is ~nil~, sets the face for all and new /frames/

To set the /foreground/ / /background color/ on a /face/:
: (set-face-foreground)
: (set-face-background)

Colors for /faces/ can be specified by a /color name/ or /RGB triplet/.
- an /RGB triplet/ is a string of the form ~#RRGGBB~

List of all color names (standard /X11/ color names):
: M-x list-colors-display
- also shows correspondence between a /color name/ and its /RGB triplet/
- customize variable ~list-colors-sort~ to sort colors differently

Infos:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Faces.html][Text Faces]] (GNU Emacs Manual)
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Colors.html][Colors for Faces]] (GNU Emacs Manual)
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Face-Customization.html][Customizing Faces]] (GNU Emacs Manual)

Examples:
#+begin_src elisp
;; To set a font for the 'default' face:
(set-face-attribute 'default nil
                    :font "Courier"
                    :height 120 ;; 12 pt
                    :weight 'regular)
#+end_src

** Using Themes
To make own theme files discoverable by Emacs:
: (add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes"))
- theme files can be placed in the =themes= directory of the emacs user dir.

To load a custom theme:
: (load-theme 'some-theme)

For a list of available themes and to toggle between them:
: M-x customize-themes

To disable a theme:
: M-x disable-theme

Modus themes
- https://protesilaos.com/emacs/modus-themes
- [[https://protesilaos.com/emacs/modus-themes#h:1af85373-7f81-4c35-af25-afcef490c111][How to install the Modus Themes]]
- [[https://protesilaos.com/emacs/modus-themes#h:bf1c82f2-46c7-4eb2-ad00-dd11fdd8b53f][How to customize the Modus Themes]]

** Creating themes
A theme ~foo~ should be defined in a file called =foo-theme.el=.

To declare a theme to be a /custom theme/:
: (deftheme <name>)
- must appear at the beginning of the file

To apply a list of /face specs/ for a theme:
: (custom-theme-set-faces <theme> <args …>)
- ~<args>~ are of the form ~(<face> <spec>  <?now> <?comment>)~

To indicate that the current /file/ provides a /theme/:
: (provide-theme <theme>)
** Other

Toggle visualization of matching parens:
: (show-paren-mode)
- /face/ for matching paren is ~show-paren-match~
- /face/ for mismatched paren is ~show-paren-mismatch~

* Development
Emacs has built-in programming language modes for Lisp, Scheme, DSSSL, Ada,
ASM, AWK, C, C++, Fortran, Icon, IDL (CORBA), IDLWAVE, Java, Javascript, M4,
Makefiles, Metafont, Modula2, Object Pascal, Objective-C, Octave, Pascal,
Perl, Pike, PostScript, Prolog, Python, Ruby, Simula, SQL, Tcl, Verilog, and
VHDL.

Other languages will require the installation of additional modes.

** Emacs Lisp (elisp)
See [[file:elisp.org][Docs/Emacs Lisp]] for reference.

** Expressions

Evaluate elisp expression in minibuffer:
: M-: / M-ESC :  : (eval-expression <exp> …)

Evaluate top-level /form/ around /point/:
: C-M-x : eval-defun

Evaluate /sexp/ before /point/:
: C-x C-e : eval-last-sexp
** Xref (cross-references)
*Xref* is a unified platform to match symbols to their definitions.
- backend uses a /TAGS/ table by default to generate and store identifiers in
  static lookup-tables
  - [[#dumb-jump]] is a good alternative that uses file search engines instead,
    which is recommended for most users
- also available in [[#dired]]: ~A~ to search and ~Q~ to search & replace in marked
  files

Jump to definition at point:
: M-. : xref-find-definitions

Return to prev. position in /xref/ history (pop marker):
: M-, : xref-go-back

Find references matching a pattern:
: M-? : xref-find-references

Find symbols matching a pattern:
: C-M-. : xref-find-apropos

*xref definition buffer* navigation:
| Xref Buffer Keys | Description                       |
|------------------+-----------------------------------|
| RET              | Jump to definition                |
| TAB              | Jump to definition, and hide xref |
| C-o              | Show definition                   |
| . and ,          | Navigate up or down               |
| r                | Query search and replace regexp   |
** Projects
See [[#project.el]]

* Built-in modes
** Repeat mode
:PROPERTIES:
:CUSTOM_ID: repeat-mode
:END:
/(Emacs 28+)/

- https://karthinks.com/software/it-bears-repeating/

Enable repeat-mode:
: M-x repeat-mode
: (setq repeat-mode t)

Lookup commands supported by repeat-mode:
: M-x describe-repeat-maps

Exit transient repeating mode by typing any other key. Or set a custom exit
key (~<return>~ is recommended):
: (setq repeat-exit-key "<return>")
** Recentf mode
:PROPERTIES:
:CUSTOM_ID: recentf-mode
:END:

Enable in config:
: (recentf-mode 1)

Show a buffer of recently opened files:
: M-x recentf-open-files
** Savehist mode
:PROPERTIES:
:CUSTOM_ID: savehist-mode
:END:

Saves /minibuffer/ history, e.g. from /i-search/.
- stored in ~savehist-file~ (variable to path of =history= file)

Limit the retained history (to improve startup time):
: (setq history-length 25)

Enable in config:
: (savehist-mode 1)

Use ~M-p~ / ~M-n~ to move backward/forward in history.
** Save-Place mode
:PROPERTIES:
:CUSTOM_ID: save-place-mode
:END:
Remembers the last place a file was visited and restores it.
- https://www.emacswiki.org/emacs/SavePlace

To enable:
: (save-place-mode 1)
** Auto-Revert mode
:PROPERTIES:
:CUSTOM_ID: auto-revert-mode
:END:
Automatically reverts a buffer when the underlying file has changed.
- will ask if the buffer has unsaved changes

On a single buffer:
: M-x auto-revert-mode

To enable globally for all buffers:
: (global-auto-revert-mode 1)
This will also automatically revert Dired and other non-file buffers:
: (setq global-auto-revert-non-file-buffers t)
** Electric indent mode
:PROPERTIES:
:CUSTOM_ID: electric-indent-mode
:END:
On-the-fly reindentation of text lines.

Insert a /newline/:
: C-j : electric-newline-and-maybe-indent
** Winner mode
:PROPERTIES:
:CUSTOM_ID: winner-mode
:END:
: (winner-mode 1)

Undo changes to a window arrangement:
: C-c <left> : winner-undo
Redo undone changes:
: C-c <right> : winner-redo
** Lisp interaction mode
Mode to interact with elisp:
: (lisp-interaction-mode 1)
- show results below with ~C-j : eval-print-last-sexp~

** elisp REPL
Interactively evaluate Emacs Lisp expressions in a REPL.
: M-x ielm

** GNU Emacs Calculator
Invoke the GNU Emacs Calculator:
: C-x * : calc-dispatch

* Packages list
** Version Control
*** Magit (Git manager)
- https://www.magit.vc
- [[https://magit.vc/manual/magit/index.html][Magit Manual]]
- [[https://www.youtube.com/watch?v=_zfvQkJsYwI][An Introduction to the Ultimate Git Interface, Magit!]] (YouTube)
- [[https://www.youtube.com/watch?v=qPfJoeQCIvA][9 Techniques to Boost Your Git Workflow with Magit]] (YouTube)

Magit will look for a Git repo associated with the current value of
~default-directory~ (typically the dir that contains the file associated
with the selected buffer).

Launch the /status interface/ to view the state of the repository:
: C-x g : magit-status

*Status buffer actions:*
| Key | Command              | Description                              |
|-----+----------------------+------------------------------------------|
| ~g~   | magit-refresh        | refresh status buffer if some file in    |
|     |                      | another buffer was changd while open     |
| ~s~   | magit-stage-file     | add change at point to staging area      |
| ~S~   | magit-stage-modified | stage all changes                        |
| ~u~   | magit-unstage-file   | remove change at point from staging area |
| ~U~   | magit-unstage-all    | unstage all changes                      |
| ~c~   | magit-commit         | create a commit or replace existing one  |
| ~P~   | magit-push           | push to another repository               |

*Evil bindings* work, but [[#evil-collection]] needs to be installed and some
Magit bindings may be different.
- *CAUTION* some keys may be bound to Git actions (see tables)

Press ~? : magit-dispatch~ for a list of available actions. Press one of the
displayed keys to bring up a subpanel to specify arguments and specialized
commands. To enable an argument, press the argument key (e.g. ~-a~,
including the dash).
- press ~C-g~ to exit a panel

*Status buffer navigation:*
| Key              | Description                                    |
|------------------+------------------------------------------------|
| ~q~                | close status buffer                            |
| ~TAB~              | expand sections                                |
| ~S-TAB~            | cycle visibility of sections (like in OrgMode) |
| ~n~ / ~p~ (non-Evil) | move to next/prev section                      |
| ~M-n~ / ~M-p~        | move to next/prev sibling section              |
| ~^~                | move to parent section                         |

For *stashes*, press ~<return>~ to see included files a diff of changes.
- press ~q~ to close

For *commits* after entering the commit-message, press ~C-c C-c~ to confirm.

*** diff-hl (diff in fringe)
:PROPERTIES:
:CUSTOM_ID: diff-hl
:END:
~diff-hl-mode~ highlights uncommitted changes on the side of the window
(using the /fringe/, by default), allows you to jump between the hunks and
revert them selectively.
- https://github.com/dgutov/diff-hl
- has more features than [[#git-gutter]] and may be more performant

| Binding | Command                     |
|---------+-----------------------------|
| ~C-x v =~ | ~diff-hl-diff-goto-hunk~      |
| ~C-x v n~ | ~diff-hl-revert-hunk~         |
| ~C-x v [~ | ~diff-hl-previous-hunk~       |
| ~C-x v ]~ | ~diff-hl-next-hunk~           |
| ~C-x v *~ | ~diff-hl-show-hunk~           |
| ~C-x v S~ | ~diff-hl-stage-current-hunk~  |
|         | ~diff-hl-set-reference-rev~   |
|         | ~diff-hl-reset-reference-rev~ |
|         | ~diff-hl-unstage-file~        |

*** git-gutter (diff in fringe)
:PROPERTIES:
:CUSTOM_ID: git-gutter
:END:
- ~git-gutter+~ contains patches that haven’t been added to ~git-gutter~
- https://github.com/emacsorphanage/git-gutter (~git-gutter~)
- https://github.com/nonsequitur/git-gutter-plus (~git-gutter+~)
** Symbolic Calculator
** Persistent =*scratch*= buffer
Preserve the scratch buffer across Emacs sessions.
- https://github.com/Fanael/persistent-scratch
** Undo Tree
Alternative /undo/ implementation.
- https://www.emacswiki.org/emacs/UndoTree
** Package managers
*** [built-in] Standard Emacs package manager
See [[#standard-package-manager]]
*** [built-in] use-package (declarative package configuration macro)
:PROPERTIES:
:CUSTOM_ID: use-package
:END:
- recommended way to deal with packages
- built-in since Emacs 29
- [[https://www.gnu.org/software/emacs/manual/html_mono/use-package.html][use-package (GNU Emacs Manual)]]
- [[https://www.masteringemacs.org/article/spotlight-use-package-a-declarative-configuration-tool][Spotlight: use-package, a declarative configuration tool]]
- https://github.com/jwiegley/use-package

Macro to /declare/ a package that is to be used:
: (use-package <pkg-name> …)
to ensure that the package is installed automatically if not already:
:  :ensure t
to pin a package to a specific /archive/:
:  :pin <archive>
evaluate ~body~ /before/ the package is loaded:
:  :init
:  <body>
evaluate ~body~ /after/ the package is loaded:
:  :config
:  <body>
to /force/ loading to occur immediately (no /autoloading/):
:  :demand t
to /defer/ loading the package until it is needed /(autoloading)/:
- will override ~use-package-always-defer~ variable
:  :defer t
- package must provide its own /autoloads/
- takes precendence over ~:demand~ if both are ~t~
to /autoload/ specific commands (instead of ~:defer~):
:  :commands (<command> …)
to bind keys to commands:
:  :bind (<binding> …)
to add functions to hooks:
:  :hook ((<hooked-mode> . <func>) …)
:  :hook (<hooked-mode> . <func>)
:  :hook <hooked-mode>
to keep it out of the modeline (less clutter):
:  :diminish
- requires ~diminish~ package

~:pin~ and ~:ensure~ interface with the [[#standard-package-manager]] for package
installation.

To globally ensure automatic package installation:
: (setq use-package-always-ensure t)

If the /archive/ *MELPA* is used, it is recommended to set:
: (setq use-package-always-pin "nongnu")
- ensures that only versions of a package are used that have been marked
  for release by the developer

Packages explicitly installed by the user are listed in the variable
~package-selected-packages~.
- fed automatically by Emacs when installing a new package
- used by ~M-x package-autoremove~ to decide which packages are no longer
  needed
- can also be used to reinstall all selected packages on a new machine
  with ~package-install-selected-packages~

Hooks example:
#+begin_src elisp
(use-package my-pkg
  :init (add-hook 'hooked-mode-hook #'my-pkg-mode))
;; simplifies to:
(use-package my-pkg
  :hook (hooked-mode . (lambda () (my-pkg-mode))))
;; or just:
(use-package my-pkg
  :hook (hooked-mode . my-pkg-mode))
;; or even simpler (assumes `my-pkg-mode` as the function):
(use-package my-pkg
  :hook hooked-mode)
#+end_src

*** [built-in] package-vc
:PROPERTIES:
:CUSTOM_ID: package-vc
:END:
Integration into [[#use-package]] as a standalone package:
- https://tony-zorman.com/posts/vc-use-package.html
- https://github.com/slotThe/vc-use-package
Since /Emacs 30/ it is built-in:
- https://tony-zorman.com/posts/use-package-vc.html
*** Elpaca
:PROPERTIES:
:CUSTOM_ID: elpaca
:END:
- comparison to [[#straight-el]]: [[https://www.reddit.com/r/emacs/comments/z4dw4v/comment/ixtzuag/][How does elpaca improve on straight?]]
- [[https://www.youtube.com/watch?v=5Ud-TE3iIQY][Elpaca: Async Emacs Package Manager]] (YouTube)
*** straight.el
:PROPERTIES:
:CUSTOM_ID: straight-el
:END:
** Project manager
*** [built-in] project.el
:PROPERTIES:
:CUSTOM_ID: project.el
:END:

A project is automatically recognized by its *version-control repository*,
which determines its /root folder/ and /indexed files/.

There are specialized commands like ~project-switch-to-buffer~ or
~project-find-file~ that are scoped to project files/dirs.

Prefix keymap ~C-x p~ (Emacs 28+):

| Keys    | Description                     |
|---------+---------------------------------|
| ~C-x p p~ | Switch to other known projects  |
| ~C-x p b~ | Switch to buffer                |
| ~C-x p f~ | Find file in project            |
| ~C-x p k~ | Kill project buffers            |
| ~C-x p g~ | Search by regexp                |
| ~C-x p r~ | Query regexp search and replace |
| ~C-x p c~ | Compile project                 |
| ~C-x p v~ | Open VC Dialog                  |
| ~C-x p s~ | Open a Shell                    |
| ~C-x p d~ | Open a Dired buffer             |

*** Projectile
- https://github.com/bbatsov/projectile
- integrates with built-in [[#project.el]] library
** Popup window manager
*** Popper
Just works. Use this instead of [[#popwin]], since it is a lot less buggy.
- https://github.com/karthink/popper
- can toggle popups and cycle through popup buffers
*** popwin
Keeps buffers like ~*Help*~, ~*Completions*~, ~*compilation*~ out of existing
windows.
- https://github.com/emacsorphanage/popwin
- seems to have some [[https://github.com/emacsorphanage/popwin/issues/147][issues]] which mess up window arrangements
*** shackle
Inspired by [[#popwin]], but simpler and more debugger-friendly, although less
customizable and more rough edges, according to developer.
- https://depp.brause.cc/shackle/

** Modal editing / Vim Emulation
*** Meow
Aims to blend modal editing into Emacs with minimal interference with its
original key-bindings, avoiding most of the hassle introduced by
key-binding conflicts.
- inspired by Kakoune
- https://github.com/meow-edit/meow

[[https://github.com/meow-edit/meow/discussions/215#discussioncomment-2589474][Discussion of trade-offs between Evil/vi and Meow]]
- Meow is a minimalist system designed around the symmetry between
  movement and selection commands
- its emphasis is on consistency (/not/ efficiency), so anything that does
  not fit the overall idea should be added by the user via customization

[[https://esrh.me/posts/2021-12-18-switching-to-meow.html][Some interesting thoughts on Meow vs vi]]

*** Boon
- https://github.com/jyp/boon
*** God mode
Lightweight package to make normal Emacs bindings more convenient to use,
without having to hold down modifiers.
- https://github.com/emacsorphanage/god-mode

*** Evil mode
:PROPERTIES:
:CUSTOM_ID: evil-mode
:END:
- https://github.com/emacs-evil/evil
- https://www.emacswiki.org/emacs/Evil

Guides:
- [[https://github.com/noctuid/evil-guide][Emacs/Evil for Vim Users]]
- [[https://www.youtube.com/watch?v=1C9GbmIP1EA][Getting Evil (aka Vim keys) in Emacs without Doom Emacs]] (YouTube)

Look at the ~evil-want~ variables in =evil-vars.el= to set some common
options.

To switch to the normal Emacs keybinding, use ~\~ as a prefix before the
command.
- e.g. ~\ C-u~ is ~C-u~ is set to scroll

The package [[#evil-collection]] is highly recommended to integrate Evil mode
across other Emacs buffers.

See [[https://github.com/noctuid/evil-guide#what-overrides-evil][What Overrides Evil?]] if normal-mode bindings do not work.

When modes are messed up, execute ~evil-normal-state~.

*** evil-surround
:PROPERTIES:
:CUSTOM_ID: evil-surround
:END:
surround.vim for [[#evil-mode]].
- https://github.com/emacs-evil/evil-surround
*** evil-collection
:PROPERTIES:
:CUSTOM_ID: evil-collection
:END:
- https://github.com/emacs-evil/evil-collection

- provides keybindings for various modes and parts of Emacs that /Evil/ does
  not cover properly, e.g. ~help-mode~, ~dired~, ~magit~, ~debugger~, ~calendar~,
  Eshell, etc.
- uses a consistent set of rules for what keys are bound to what types of
  actions
- may replace some default keybindings in some modes
*** evil-org
- https://github.com/Somelauw/evil-org-mode
*** evil-markdown
- https://github.com/Somelauw/evil-markdown
*** evil-magit
:PROPERTIES:
:CUSTOM_ID: evil-magit
:END:

Now part of [[#evil-collection]]
** Keybindings
*** general.el (convenient key definitions)
:PROPERTIES:
:CUSTOM_ID: general.el
:END:
- https://github.com/noctuid/general.el
*** hydra
- https://github.com/abo-abo/hydra
*** which-key
:PROPERTIES:
:CUSTOM_ID: which-key
:END:
- https://github.com/justbur/emacs-which-key
** Completion frameworks
*** [built-in] Minibuffer completions

_Config:_

Appearance and sorting of completions:
: completions-format :: vertical | horizontal | one-column

Wrap around when selecting completion options:
: completion-auto-wrap :: nil | t
- Emacs 29.1+

Automatically provide help (opens ~*Completions*~ buffer) for invalid
completion input:
: completion-auto-help :: nil | t | lazy | always | visible

Maximum height of completions buffer:
: completions-max-height :: nil | <num>

Format heading line in ~*Completions*~ buffer:
: completions-header-format :: …

Show/hide the help message in ~*Completions*~ buffer:
: completions-show-help :: nil | t


_Minibuffer commands:_

Show ~*Completions*~ window:
: ? : minibuffer-completion-help

Complete match or show ~*Completions*~ window:
: TAB : minibuffer-complete

Switch to ~*Completions*~ window:
: M-v : switch-to-completions

Exit if minibuffer contains a valid completion:
: RET / C-m : minibuffer-complete-and-exit

Complete the next word /(context-dependent)/:
: SPC : minibuffer-complete-word

Complete history match:
: C-x <up> : minibuffer-complete-history

Just autocomplete without selecting:
: C-M-i / M-<TAB> : complete-symbol

*** [built-in] Icomplete / IDO / FIDO
:PROPERTIES:
:CUSTOM_ID: icomplete
:END:
Icomplete global minor mode
: M-x icomplete-mode / (setq icomplete-mode t)

Continuously displays a list of possible completions that match the typed
string.

*Usage:* select the first completion in the list with ~C-j~. To make an item
in the list the first one, either:
1. type some initial letters (can be anywhere in the string)
2. use ~C-.~ and ~C-,~ to rotate the list

Rotate the list:
: C-. : icomplete-forward-completions
: C-, : icomplete-backward-completions

Force-complete minibuffer with +longest+ possible match and exit:
: C-j : icomplete-force-complete-and-exit
- immediately enters a directory instead of completing it

Force-complete minibuffer with +longest+ possible match:
: C-M-i / M-<TAB> : icomplete-force-complete

**** Ido mode / Fido mode

*Recommended:* IDO for Emacs 26-, FIDO for Emacs 27+

*Ido mode:* “Interactively DO things”
- https://www.masteringemacs.org/article/introduction-to-ido-mode
- https://www.masteringemacs.org/article/understanding-minibuffer-completion

*Fido mode:* “Fake Ido” – similar to /Icomplete mode/ but retains some
functionality from Ido mode.
- uses ~flex~ as the default completion style
- has special commands for ~find-file~
: M-x fido-mode / (fido-mode 1)

Exit minibuffer with match /or/ complete directory:
: RET : icomplete-fido-ret
- use as /default confirm/ and ~C-j~ / ~C-M-i~ for special cases

Confirm /without/ autocomplete (e.g. to create a new buffer):
: M-j : icomplete-fido-exit
- does not exit for incomplete commands

Move up in path/directory:
: DEL : icomplete-fido-backward-updir

Delete files and kill buffers in-list:
: C-k : icomplete-fido-kill

: icomplete-fido-delete-char

*** helm (completion system)
*** vertico.el (completion UI)
:PROPERTIES:
:CUSTOM_ID: vertico
:END:
VERTical Interactive COmpletion
- https://github.com/minad/vertico
*** consult.el
Consulting completing-read. Provides search and navigation commands based
on the Emacs completion function ~completing-read~.
- https://github.com/minad/consult
- compatible with [[#vertico]] and [[#icomplete]], among other completion
  frameworks
*** Ivy (& Counsel)
:PROPERTIES:
:CUSTOM_ID: ivy
:END:
Generic completion mechanism similar to ~icomplete-mode~, but more
efficient, smaller, simpler, highly customizable.
- https://github.com/abo-abo/swiper

**** Counsel
:PROPERTIES:
:CUSTOM_ID: counsel
:END:
Collection of [[#ivy]]-enhanced versions of common Emacs commands.
- https://github.com/abo-abo/swiper#counsel

**** Ivy-rich
Allows to add descriptions alongside the commands in ~M-x~.
*** Company
Text completion framework.
- https://company-mode.github.io
- https://github.com/company-mode/company-mode

Use ~M-n~ and ~M-p~ to select, ~<return>~ to complete or ~<tab>~ to complete the
common part.
*** marginalia (annotations for completions)
Adds annotations (/marginalia/) like function descriptions, etc. to
minibuffer completions.
- https://github.com/minad/marginalia
** Search
*** Swiper (regex search, uses [[#ivy]])
:PROPERTIES:
:CUSTOM_ID: swiper
:END:
- https://github.com/abo-abo/swiper
** Snippets
*** Yasnippet
Template system for Emacs to type abbreviations and have them expand into
function templates.
- https://github.com/joaotavora/yasnippet
- https://www.emacswiki.org/emacs/Yasnippet
** Structural editing
*** paredit
:PROPERTIES:
:CUSTOM_ID: paredit
:END:
Classic structural editing package for Emacs.
- https://paredit.org
*** evil-paredit
Evil extension to integrate nicely with paredit.
:PROPERTIES:
:CUSTOM_ID: evil-paredit
:END:
- https://github.com/roman/evil-paredit
*** smartparens
:PROPERTIES:
:CUSTOM_ID: smartparens
:END:
Popular alternative to [[#paredit]].
- https://github.com/Fuco1/smartparens
*** evil-smartparens
:PROPERTIES:
:CUSTOM_ID: evil-smartparens
:END:
[[#evil]] integration for [[#smartparens]].
- https://github.com/expez/evil-smartparens

Alternative: [[#evil-cleverparens]]

*** evil-cleverparens
:PROPERTIES:
:CUSTOM_ID: evil-cleverparens
:END:
[[#evil]] normal-state minor-mode for editing Lisp-like languages.
- uses functions from both [[#smartparens]] and [[#paredit]] (neither one required
  by default, but highly recommended)
- https://github.com/emacs-evil/evil-cleverparens

For [[#smartparens]], ~smartparens-strict-mode~ is recommended.

Alternative: [[#evil-smartparens]]
- “has more features and opinions, and probably more bugs :)”
*** lispy
:PROPERTIES:
:CUSTOM_ID: lispyville
:END:
vi-like [[#paredit]].
- https://github.com/abo-abo/lispy
- http://oremacs.com/lispy/
*** lispyville
:PROPERTIES:
:CUSTOM_ID: lispyville
:END:
A minor mode for integrating [[#evil]] with [[#lispy]].
- https://github.com/noctuid/lispyville
- similar intent to [[#evil-cleverparens]] and related packages
*** symex
:PROPERTIES:
:CUSTOM_ID: symex
:END:
An [[#evil]] way to edit Lisp symbolic expressions as trees.
- https://github.com/drym-org/symex.el
- at the moment, uses [[#paredit]], [[#lispy]], and [[#evil-cleverparens]] to provide
  much of its low level functionality
*** Parinfer
- https://github.com/justinbarclay/parinfer-rust-mode
- https://shaunlebron.github.io/parinfer/
*** embrace.el
About Add/Change/Delete pairs based on ~expand-region~, similar to
[[#evil-surround]].
- https://github.com/cute-jumper/embrace.el
** Documentation
*** [built-in] eldoc
Show function arglist or variable docstring in echo area
- https://elpa.gnu.org/packages/eldoc.html
*** dumb-jump
:PROPERTIES:
:CUSTOM_ID: dumb-jump
:END:
“jump to definition” package for 50+ languages.
- uses file searchers like ~grep~, ~ack~, ~ag~ or ~ripgrep~ to find matches
  relevant to the major mode (contrary to /xref/, which uses /TAGS/ files)
- https://github.com/jacktasia/dumb-jump
** Syntax
*** [built-in] tree-sitter
:PROPERTIES:
:CUSTOM_ID: tree-sitter
:END:
- built-in since Emacs 29
- https://www.masteringemacs.org/article/how-to-get-started-tree-sitter
- [obsolete] https://github.com/emacs-tree-sitter/elisp-tree-sitter
*** tree-sitter-langs (language bundle)
Language bundle for Emacs’s [[#tree-sitter]] package. 
- https://github.com/emacs-tree-sitter/tree-sitter-langs
** LSP
*** Flycheck (linter)
:PROPERTIES:
:CUSTOM_ID: flycheck
:END:
Syntax checking.
- https://www.flycheck.org
- replacement for older /Flymake/ extension
- install =luacheck= for flycheck to work correctly with *lua* files
- install =python-pylint= for flycheck to work with *python* files
- *Haskell* works with flycheck as long as =haskell-ghc= or =haskell-stack-ghc=
  is installed

More information on language support:
- https://www.flycheck.org/en/latest/languages.html
*** [built-in] eglot
Emacs Client for LSP servers ("Emacs Polyglot")
- https://github.com/joaotavora/eglot/
** OrgMode
*** [built-in] ORG mode
:PROPERTIES:
:CUSTOM_ID: org-mode
:END:
- see my [[file:orgMode.org][Docs/OrgMode]]
- https://orgmode.org
- [[https://orgmode.org/orgcard.pdf][Org-Mode Reference Card]]
- [[https://orgmode.org/worg/][Worg (Org-Mode community)]]

Navigate quickly by using single keys at the beginning of an Org headline:
: (setq org-use-speed-commands t)
- see https://orgmode.org/manual/Speed-Keys.html
- to show currently active Speed Keys: ~M-x org-speed-command-help~ or ~?~
  when point is at the beginning of an org headline

To indent text according to outline structure:
: (org-indent-mode)

To adapt indentation to outline node level:
: (setq org-adapt-indentation t)
- indents text to align with headings
- actually adds space, unlike ~org-indent-mode~
*** [built-in] org-tempo
Expands snippets, e.g. ~<s~ + ~<TAB>~ to create a code block.
- see [[info:org#Structure Templates][org#Structure Templates]]

To enable:
: (require 'org-tempo)

*** toc-org
Generates a table of contents for Org-mode.
- https://github.com/snosov1/toc-org
*** org-appear
Toggle visibility of hidden Org mode element parts upon entering and
leaving an element.
- https://github.com/awth13/org-appear
*** org-noter
Document annotator.
- https://github.com/weirdNox/org-noter
*** org-bullets
utf-8 bullets for [[#org-mode]].
- https://github.com/sabof/org-bullets
*** org-modern
Modern style for Org buffers using font locking and text properties.
Styles headlines, keywords, tables and source blocks.
- https://github.com/minad/org-modern

*** org-sidebar
Helpful customizable sidebar for [[#org-mode]] buffers.
- https://github.com/alphapapa/org-sidebar
*** org-transclusion
Insert a copy of text content via a file link or ID link within an
[[#org-mode]] file.
- https://github.com/nobiot/org-transclusion
*** org-xlatex
Instant LaTeX preview using xwidget and MathJax.
- https://github.com/ksqsf/org-xlatex
*** orglink
Use [[#org-mode]] links in other modes.
- https://github.com/tarsius/orglink
*** org-auto-tangle
Tangles org files (asynchronously) on save.
- https://github.com/yilkalargaw/org-auto-tangle
** Knowledge work
*** org-ref
Citations, cross-references, indexes, glossaries and bibtex utilities for
[[#org-mode]].
- https://github.com/jkitchin/org-ref
*** org-brain
/TheBrain/ (graph-based PKM & concept mapping), but in [[#org-mode]].
- https://github.com/Kungsgeten/org-brain
- [[https://www.youtube.com/watch?v=3EGOwfWok5s][org-brain: Concept mapping in Emacs - Introduction]] (YouTube)
*** org-roam
/Roam/ (nested-bullets-style PKM), but in [[#org-mode]].
- https://github.com/org-roam/org-roam
*** org-zettelkasten
/Zettelkasten/ (PKM system invented by Niklas Luhmann), but in [[#org-mode]].
- https://github.com/l3kn/org-zettelkasten
*** org-wiki
Manage and build a personal /Wiki/ using [[#org-mode]].
- https://github.com/caiorss/org-wiki
*** org-mind-map
Creates graphviz directed graphs from [[#org-mode]] files.
- https://github.com/the-ted/org-mind-map
*** …also see
- https://www.emacswiki.org/emacs/WikiModes
** Files
*** [built-in] Dired (file-/directory manager)
:PROPERTIES:
:CUSTOM_ID: dired
:END:

*** sudo-edit
Enables editing a file with sudo privileges or switch to editing with such
privileges on an open buffer.
- https://github.com/nflath/sudo-edit
*** Tramp (remote file editing)
** Icons
*** all-the-icons
:PROPERTIES:
:CUSTOM_ID: all-the-icons
:END:
A utility package to collect various Icon Fonts and propertize them within
Emacs.
- https://github.com/domtronn/all-the-icons.el
*** all-the-icons-nerd-fonts
/Nerd font/ integration for [[#all-the-icons]].
- https://github.com/mohkale/all-the-icons-nerd-fonts
*** all-the-icons-dired
Adds dired support to [[#all-the-icons]].
- https://github.com/wyuenho/all-the-icons-dired
*** all-the-icons-ibuffer
Display icons for all buffers in ibuffer.
- https://github.com/seagle0128/all-the-icons-ibuffer
*** all-the-icons-completion
Add icons to completion candidates using the built in completion metadata
functions.
- https://github.com/iyefrat/all-the-icons-completion
*** all-the-icons-ivy-rich
Icons for [[#ivy]].
- https://github.com/seagle0128/all-the-icons-ivy-rich
** Styling/Themes
*** ThemeCreator
- https://github.com/mswift42/themecreator
- https://mswift42.github.io/themecreator/
*** doom-themes
Megapack of themes from the Doom Emacs distribution.
- https://github.com/doomemacs/themes
*** rainbow-mode
Sets background color to strings that match color names.
- https://elpa.gnu.org/packages/rainbow-mode.html
*** rainbow-delimiters
"rainbow parentheses"-like mode which highlights delimiters such as
parentheses, brackets or braces according to their depth.
- https://github.com/Fanael/rainbow-delimiters
*** hl-todo
Highlights TODO keywords.
- https://github.com/tarsius/hl-todo
** Terminal / Shell
*** [built-in] Shell Mode
:PROPERTIES:
:CUSTOM_ID: shell-mode
:END:
Shell using an external program (~bash~ on Linux, ~cmd.exe~ on Windows).
- can use normal Emacs text editing and movement (just a simple buffer)
- for interactive terminal programs, use [[#ansi-term]] instead

Redirects I/O through a pseudo-terminal (Linux) to interact with the
underlying shell through Emacs.
- cannot use the shell’s native TAB-completion (uses Emacs’s own)
- can edit and delete output from commands
- can kill and yank text between buffers
- some programs like ~top~ and ~man~ don’t work (well)
  - use ~M-x proced~ and ~M-x man~ as replacements

: M-x shell

| Keys              | Description                                |
|-------------------+--------------------------------------------|
| ~M-p~ / ~M-n~         | cycle through command history              |
| ~C-<up>~ / ~C-<down>~ |                                            |
| ~M-r~               | Isearch history backward                   |
| ~C-c C-p/n~         | jump to prev/next prompt                   |
| ~C-c C-s~           | save command output to file                |
| ~C-c C-o~           | deletes command output since last input    |
|                   | (does NOT send to /kill ring/ by default)    |
| ~C-c C-l~           | list command history (to reinsert)         |
| ~C-d~               | delete forward char or send ~^D~ if no input |
|                   | (may exit the shell)                       |
| ~C-c C-z~           | (?) send stop sub job                      |
| ~TAB~               | complete at the point                      |

*** [built-in] ansi-term (Terminal Emulator)
:PROPERTIES:
:CUSTOM_ID: ansi-term
:END:
Acts like a /ANSI-capable terminal emulator/, not like [[#shell-mode]] or a
typical Emacs buffer.
- slow and some obscure terminal emulation features are not supported

: M-x ansi-term

*line mode* can be used for editing like in a typical Emacs buffer.

*character mode* is like a normal terminal emulator.
- most keys are sent directly to the underlying shell program, bypassing
  Emacs entirely
- the /escape character/ ~C-c~ gets intercepted by Emacs
- to send /C-c/ to the sub-program, type ~C-c C-c~

| Keys    | Description              |
|---------+--------------------------|
| ~C-c C-j~ | switch to /line mode/      |
| ~C-c C-k~ | switch to /character mode/ |

*** [built-in] Eshell (Emacs Shell written in elisp)
:PROPERTIES:
:CUSTOM_ID: eshell
:END:

: M-x eshell

To open a file in an Emacs buffer:
: $ find-file <filename>
To open a dired session for the current directory:
: $ dired .
*** vterm
:PROPERTIES:
:CUSTOM_ID: vterm
:END:
Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs
based on [[https://github.com/neovim/libvterm][libvterm]], a C library. As a result of using compiled code
(instead of elisp), emacs-libvterm is fully capable, fast, and it can
seamlessly handle large outputs.
- https://github.com/akermu/emacs-libvterm
*** vterm-toggle
Toggles between the [[#vterm]] buffer and whatever buffer you are editing.
- https://github.com/jixiuf/vterm-toggle

** Other
- [[https://emacspeak.sourceforge.net][Emacspeak]] (speech interface for visually impaired people)
- EMMS (Emacs multimedia system) (interactive media browser & music player)
- [[https://github.com/Malabarba/beacon][beacon]] (light that follows the cursor when jumping around)
- [[https://github.com/larstvei/Focus][focus]] (dims the font color of surrounding paragraphs)
  
  
