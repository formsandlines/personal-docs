#+title: Docs/Emacs

Learning resources:
- [[https://www.youtube.com/watch?v=48JlgiBpw_I][The Absolute Beginner's Guide to Emacs]] (System Crafters)
- [[https://www.masteringemacs.org][Mastering Emacs]] (ebook by Mickey Petersen)
- [[https://emacs.stackexchange.com][emacs StackExchange]]
- [[https://www.reddit.com/r/emacs/][r/emacs]]

*Note:* keybindings are Emacs defaults, if not specified otherwise, OS-specific details assume MacOS (which I use)

* Installing Emacs
** Yamamoto’s Mac port
https://github.com/railwaycat/homebrew-emacsmacport

: $ brew tap railwaycat/emacsmacport
: $ brew install emacs-mac  --with-modules --with-native-compilation

** Other Mac ports
Infos:
- [[https://www.reddit.com/r/emacs/comments/lijn31/best_emacs_port_for_mac_early_2021_edition/gn45q1h/]['Best' Emacs port for Mac - early 2021 edition?]] (reddit)
- https://emacsformacosx.com
- https://www.emacswiki.org/emacs/EmacsForMacOS

* Starting Emacs
: $ emacs
or open the app.

** in the Terminal

: $ exec emacs -nw
- ~exec~ will replace the shell with the Emacs process (may not be necessary)
- ~-nw~ runs Emacs in “no-window” mode, so it won’t try to create a graphical
  frame (ensures all keystrokes are sent to Emacs)

Use ~F10~ to open menu, arrow keys to navigate, ~ESC~ to exit

To prevent the terminal session from closing after Emacs has been closed:
: $ bash -c 'exec emacs -nw'
- starts a subshell for Emacs to replace

** with a different /init/ file

: $ mkdir ~/.emacs.d.foo
: $ touch ~/.emacs.d.foo/init.el

: $ emacs -q -l ~/.emacs.d.foo/init.el
- ~-q~ does not load the default init file
- ~-l~ loads a different config file

** as a separate GUI instance

On MacOS:
: $ open -n -a /Applications/Emacs.app --args --no-desktop
- ~-n~ opens a new instance of the app
- ~--no-desktop~ does not load a saved desktop

* Configuration

=~/.emacs/init.el= is the configuration file.

** Location for config files
Main configuration file (might have to be created first):
- =~/.emacs= or =~/.emacs.el= : old locations, *not recommended*
- =~/.emacs.d/init.el= : recommended for *MacOS* and *Windows*
- =~/.config/emacs/init.el= : recommended for *Linux*

Normally Emacs uses the environment variable ~HOME~ to find =.emacs=. If =.emacs=
is not found inside =~/= (nor =.emacs.el=), Emacs looks for =~/.emacs.d/init.el=
(which, like =~/.emacs.el=, can be byte-compiled).
- when both are available, =~/.emacs.el= is preferred over =~/.emacs=
- see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Find-Init.html#Find-Init][How Emacs Finds Your Init File]]

The variable ~user-init-file~ holds the location of the init file. After Emacs
found and has finished loading the init file, it sets the value of the
variable to its path.
- if it is ~nil~, no configuration was loaded
- when starting Emacs with the ~-q~ flag, the variable will still be set to
  the init file that would ordinarily be loaded, even though no init file
  was actually loaded

The variable ~user-emacs-directory~ holds the directory for per-user
Emacs-specific files.
- set ~--init-directory~ flag (Emacs 29+) to start Emacs from a different user
  directory (e.g. to use a separate config)

The file =early-init.el= (Emacs 27+) is loaded before the package system and
GUI is initialized, which makes it ideal for settings that need to be in
effect at the start of Emacs startup process.
- it must be created by the user, e.g. inside =~/.emacs.d=
- its location is determined implicitly by the value of ~user-emacs-directory~

** using the /Customize/ interface
Recommended for beginners who are not yet comfortable writing elisp.
: M-x customize
- supported by most built-in packages and some third-party ones
- opens up ~*Customize Group: Emacs*~ buffer with a list of /groups/

To customize a specific option:
: M-x customize-option
To customize a specific group of options:
: M-x customize-group

** using elisp

#+begin_src elisp
;; Setting configuration variables:
(setq true-config-variable t
      false-config-variable nil)

;; Enabling/disabling modes:
(turned-off-mode -1)
(turned-on-mode 1)
#+end_src

** Themes

To load a custom theme:
: (load-theme 'some-theme)

To disable a theme:
: M-x disable-theme

Modus themes
- https://protesilaos.com/emacs/modus-themes
- [[https://protesilaos.com/emacs/modus-themes#h:1af85373-7f81-4c35-af25-afcef490c111][How to install the Modus Themes]]
- [[https://protesilaos.com/emacs/modus-themes#h:bf1c82f2-46c7-4eb2-ad00-dd11fdd8b53f][How to customize the Modus Themes]]

** Debugging

Try starting Emacs with the ~-q~ flag to prevent the /init/ file from loading and
determine if the error comes from a broken init file.

** Example configs
- https://github.com/daviwil/dotfiles/blob/master/Emacs.org
- https://github.com/olivertaylor/dotfiles/blob/master/emacs/init.el

Some common configs:
#+begin_src elisp
;; Get rid of the startup buffer
(setq inhibit-startup-message t)

;; Turn off unneeded UI elements
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Display line numbers in every buffer
(global-display-line-numbers-mode 1)

;; Use spaces instead of tabs for indentation
(indent-tabs-mode nil)

;; Retain 4 lines of overlapping text when scrolling
(setq next-screen-context-lines 4)

;; Define sentences to end with single instead of double space
(setq sentence-end-double-space nil)

#+end_src

** Starter Kits
*** Doom Emacs
https://github.com/hlissner/doom-emacs/blob/develop/docs/getting_started.org#on-macos

*** Other
- [[https://github.com/purcell/emacs.d][.emacs.d]] (Steve Purcell)
- [[https://github.com/bbatsov/prelude][Prelude]] (Bozhidar Batzov)
- [[https://spacemacs.org][Spacemacs]]

* Keybindings

| Notation | Key                                               |
|----------+---------------------------------------------------|
| ~C~        | CONTROL (hold)                                    |
| ~M~        | META (=> often OPT/ALT key (hold) or ESC (press)) |
| ~S~        | SHIFT                                             |

Mostly obsolete/historic keys:
| Notation | Key                                    |
|----------+----------------------------------------|
| ~s~        | SUPER (=> often CMD/LINUX/WINDOWS key) |
| ~H~        | HYPER                                  |
| ~A~        | ALT (redundant and not used)           |

- ~C~ is often used for operations with basic text units
- ~M~ is often used for operations with linguistic units

Personal mapping (MacOS):
#+begin_src elisp
(setq mac-command-modifier 'meta)       ;; left cmd
(setq mac-right-command-modifier 'meta) ;; right cmd
(setq mac-right-option-modifier nil)
(setq mac-option-modifier nil)
#+end_src
- no OPT bindings because the interfere with European umlaut chars, etc.
- left/right CTRL = CAPS-LOCK = ~C~ (map in MacOS keyboard settings)

Common prefix keys:
- ~C-x~ is the prefix for Emacs’ primary key bindings
- ~C-c~ is the prefix for active major or minor modes and user key bindings

* Terminology
Keybindings:
- *key sequence* (or just /key/) → sequence of keyboard/mouse actions
- *complete key* → one or more /key sequences/ that invoke a /command/
- *prefix key* → /key sequence/ that is not a /complete key/

Editor:
- *frame* → Emacs GUI window or terminal area
- *window* → subdivision in a /frame/

Text editing:
- *point* → caret/cursor
- *mark* → fixed /point/
- *region* → contiguous text range from /mark/ to /point/
- *visual line* / *screen line* → text line as it appears (before a wrap)
- *logical line* → text line as a syntactic unit (disregarding any wraps)

Text units:
- *word* → string of text that ends on a non-alphabetic char (?) or (?)
- *sentence* → defined by the variables ~sentence-end-double-space~,
  ~sentence-end-without-period~ and ~sentence-end-without-space~
  - by default, a string of text that ends with a period followed by two
    spaces
- *paragraph* → defined by the variables ~paragraph-start~, ~paragraph-separate~ and
  ~use-hard-newlines~
  - by default, a newline-delimited block of text
  - ~M-x paragraph-indent-minor-mode~ to mark the beginning by leading spaces
- *page* → anything delimited by the character defined in the variable
  ~page-delimiter~

[[Modes]]:
- *mode* → collection of functionality that applies to one or more buffers
- *major mode* → /mode/ that applies to a single buffer
- *minor mode* → /mode/ that may apply to multiple buffers

** single vs double spacing after sentences
- https://www.gnu.org/software/emacs/manual/html_node/emacs/Sentences.html
- [[https://emacs.stackexchange.com/questions/7195/how-can-i-normalize-sentence-endings][How can I normalize sentence-endings?]]
- [[https://emacs.stackexchange.com/questions/2766/any-functionality-differences-using-a-two-space-vs-one-space-convention-at-the-e/2771#2771][Any functionality differences using a two-space vs one-space convention at the end of a sentence?]]

To switch to single-spacing:
: (setq sentence-end-double-space nil)


* Commands
** General

Enter and execute a command:
: M-x
- press ~TAB~ to list all commands starting with the input text

Exit Emacs:
: C-x C-c : save-buffers-kill-terminal

Exit out of prompts, regions, prefix arguments and return to just one window:
: ESC ESC ESC
Interrupt command (maybe press multiple times):
: C-g : keyboard-quit

Repeat the previous command:
: C-x z (z …) : repeat
- just ~z~ to repeat multiple times
Repeat a command ~n~ times:
: C-u <n> <cmd> : universal-argument
- e.g. ~C-u 8 C-f~ to move cursor forward 8×
See also [[Repeat Mode]]

Begin a /negative/ numeric argument for the next command:
: C-M-- / C-- / M-- : negative-argument

** Help / Infos
Get help/description:
: C-h …
- ~a~: ~apropos-command~ (regex search for Lisp symbols)
- ~i~: ~info~ (INFO mode / Emacs manual)
- ~k~: ~describe-key~ (lookup a key binding)
- ~v~: ~describe-variable~
- ~f~: ~describe-function~
- ~o~: ~describe-symbol~
- ~m~: ~describe-mode~ (lookup (current) mode)
- ~C~: ~describe-coding-system~ (display infos about coding system)
- ~F~: ~Info-goto-emacs-command-node~ (find documentation for command)

To open the /man page/ for a terminal command in Emacs:
: M-x man

Show list of all bindings:
: M-x describe-bindings

Show Emacs uptime counter:
: M-x emacs-uptime
Show Emacs version:
: M-x emacs-version

Keyboard-friendly menu bar:
: M-`
- ? does this work

Info mode navigation:
| Key   | Action                                  |
|-------+-----------------------------------------|
| ~[~ · ~]~ | Previous / next section                 |
| ~l~ · ~r~ | Go back / forward in viewing history    |
| ~n~ · ~p~ | Previous / next section (same level)    |
| ~u~     | Parent section                          |
| ~SPC~   | Scroll one screen at a time             |
| ~TAB~   | Cycle through cross-references & links  |
| ~RET~   | Open selected link                      |
| ~m~     | Prompt for a menu item name and open it |
| ~q~     | Close INFO                              |

** Modes

A *major mode* provides /core functionality/ for the current buffer.
- activated by specific /file extensions/ the buffer reacts to or with
  specific /commands/
- displayed in the /mode line/ (e.g. ~Org~ for /Org mode/)
- ~Fundamental~ is the /default mode/ that has no special functionality

A *minor mode* provides /additional functionality/, independent of a specific
buffer.
- can be activated in a /single buffer/ or /globally/
- e.g. for workflow customizations, appearance, etc.

A file’s *major mode is detected* (in order) by:
- *[[File-local variables]]* can have ~mode~ values that Emacs will detect
- *Program loader directives* /(shebangs)/ that begin with ~#!~
  - Emacs will figure out the major mode if available
  - the variable ~interpreter-mode-alist~ lists all program loaders Emacs can
    detect
- *Magic mode detection* checks if the beginning of the file matches a pattern
  stored in the variable ~magic-mode-alist~
  - applies if filename or extension cannot be predicted ahead of time
- *Automatic mode detection* through file extensions, file names or all or
  parts of a file’s path
  - the variable ~auto-mode-alist~ lists all patterns and associated modes
    Emacs can detect

** Windows
Select another window (in cyclic ordering):
: C-x o : other-window

Delete all windows except the /active window/:
: C-x 1 : delete-other-windows
Split /active window/ vertically:
: C-x 2 : split-window-below
Split /active window/ horizontally:
: C-x 3 : split-window-right

Toggle popups (e.g. for help):
: C-` : +popup/toggle
- requires ~popup.el~

** Buffers
Buffers need not be for files, but can also be /transient buffers/ for e.g.
network I/O or text processing (/scratch/, /help/, etc.).

Show buffer list:
: C-x C-b : list-buffers
Open dired buffer manager:
: M-x ibuffer
- recommended to use with keybinding of ~list-buffer~:
  ~(global-set-key [remap list-buffers] 'ibuffer)~

Switch to previous/next buffer:
: C-x ←/→ : previous-buffer / next-buffer
Switch to buffer by name:
: C-x b : consult-buffer

Kill buffer (current buffer or named):
: C-x k : kill-buffer
- according to “Mastering Emacs”, it is normal to have hundreds or even
  thousands of buffers open, so this is not as important as it seems

Reload buffer (replaces buffer with file on disk, undoing all changes):
: M-x revert-buffer

*Mini buffer* / *minibuffer*: interactive buffer that appears in the /echo area/
and displays errors and general information or acts as an interface (e.g.
for buffer selection or input of pathnames).

Completion frameworks for buffer switching:
- [[#icomplete][Icomplete / IDO / FIDO]]

** Files

Load file into buffer:
: C-x C-f : find-file

Save buffer to file:
: C-x C-s : save-buffer
Write buffer to different file /(save as…)/:
: C-x C-w : write-file
Save all modified file-visiting buffers:
: C-x s : save-some-buffers
-  will ask, in turn, for each unsaved file

*** Coding system

Check the variable ~buffer-file-coding-system~ to see the coding system used
by the current buffer.
- can also be checked with ~C-h C <RET>~, but not if ~fido-mode~ is active
- alternatively, click the leftmost symbol in the /modeline/

To change the coding system in use (select from list):
: C-x RET r : revert-buffer-with-coding-system
- reverts the buffer!
- buffer must be saved to make changes permanent

*** Line endings

Line ending indicators in the /modeline/ (e.g. in ~U:**-~):
| Indicator | Style               |
|-----------+---------------------|
| ~:~         | UNIX-style          |
| ~(DOS)~     | DOS                 |
| ~(Mac)~     | Macintosh (pre-OSX) |

*** File-local variables
Enabled per file if present in the file.
- will *not* overwrite variables globally

As headers:
: -*- mode: mode-name-here; my-variable: value -*-
or footers:
: Local Variables:
: mode: mode-name-here
: my-variable: value
: End:

Commented lines (with the /major mode’s/ comment syntax) will work too.

** Expressions

Evaluate elisp expression in minibuffer:
: M-: / M-ESC :  : (eval-expression <exp> …)

Evaluate top-level /form/ around /point/:
: C-M-x : eval-defun

Evaluate /sexp/ before /point/:
: C-x C-e : eval-last-sexp

** Other things

Weird screensaver:
: M-x zone
Text adventure game:
: M-x dunnet
Tetris clone:
: M-x tetris
Psychotherapist:
: M-x doctor

* Text editing
** General
*** Line wrapping /(truncation)/

Lines are (usually) not continuous but are broken up by hard line-breaks.
- ~M-x auto-fill-mode~ activates automatic breaking of lines if they exceed
  the max. character limit
- ~M-q : fill-paragraph / org-fill-paragraph~ correctly breaks a continuous
  paragraph into lines

If a line /is/ continuous, it can wrap into multiple /visual lines/ or stretch
out in full horizontally, which can be toggled using:
: M-x toggle-truncate-lines

By default, Emacs movement is by *visual lines*.
- to change this, set ~line-move-visual~ to ~nil~
- [[#evil-mode][evil mode]] moves by /logical lines/ instead, as /Vi(m)/ does

The /minor mode/ ~visual-line-mode~ (disabled by default) makes Emacs behave
more like a traditional word processor, e.g. by wrapping by word boundary
and disabling the fringe indicators.
- will also change some movement and editing commands to act on /visual
  lines/ instead
- set ~global-visual-line-mode~ variable to enable globally

*** Line numbers

To enable line numbers globally, call in =init.el=:
: (global-display-line-numbers-mode)
- configure options with ~M-x customize-group RET display-line-numbers~
- for a single buffer, call ~M-x display-line-numbers-mode~

** Text Movement

To repeat movements ~n~ times, type ~C-{n} <cmd>~ or the longer ~C-u <n> <cmd>~ to
enter larger ~n~.

Move by character:
:    C-p    : previous-line
: C-b · C-f : backward-char · forward-char
:    C-n    : next-line
: (or use arrow keys)
- wraps around lines

Move to start of previous word / before next word:
: M-b / M ← : left-word
: M-f / M → : right-word

Move to start of / end of /paragraph/:
: M-{ : backward-paragraph
: M-} : forward-paragraph

Jump to the first non-whitespace character on the current line:
: M-m : back-to-indentation

Jump to beginning/end of line:
: C-a / Home : move-beginning-of-line
: C-e / End  : move-end-of-line
Jump to beginning/end of sentence (must be separated by 2 spaces):
: M-a : backward-sentence
: M-e : forward-sentence

Jump to a place in the buffer chosen from menu (e.g. specific symbols):
: M-g i : imenu

** Window/Buffer Movement (scrolling, etc.)

Go to line:
: M-g M-g / M-g g : (goto-line <n>)
Go to column:
: M-g TAB : (move-to-column <n>)
Go to character position (absolute pos. from beginning of buffer):
: M-g c : (goto-char <n>)

Scroll window so that current line is in the middle/top/bottom of the window:
: C-l : recenter-top-bottom
Re-position the point to the middle/top/bottom left of the window:
: M-r : move-to-window-line-top-bottom
Make current definition and/or comment visible:
: C-M-l : reposition-window
- tries to scroll comments or definitions into view

Scroll window page-wise further/back:
: C-v / SPC (read-only) / PgDown : scroll-up-command
: M-v / DEL (read-only) / PgUp   : scroll-down-command
- set ~next-screen-context-lines~ variable to retain /n/ lines of overlapping
  text when scrolling
- use ~C-<n>~ or ~C-u <n>~ before the command to scroll ~n~ lines further/back

Scroll /other/ window page-wise further/back:
: C-M-v : scroll-other-window
: C-M-S-v : scroll-other-window-down
- useful e.g. for scrolling help buffers
- ~C-M-- C-M-v~ may be easier to type for reverse scroll

Jump to start/end of buffer:
: M-< / C-Home : beginning-of-buffer
: M-> / C-End  : end-of-buffer
- sets a /mark/ on the previous cursor position (to jump back to)

Scroll left/right:
: C-x < / C-<next> : scroll-left
: C-x > / C-<prior> : scroll-right
: S-<wheel>  (since Emacs 28)
- *disabled* by default, because confusing to beginners
  - see: [[https://stackoverflow.com/questions/35437652/how-to-scroll-horizontally-in-emacs][How to scroll horizontally in emacs?]]

Set/fix the /goal column/ (horizontal position for the /point/):
: C-x C-n : set-goal-column
- when moving from one line to the next, Emacs will try to set the point on
  the /goal column/ instead of the one the /point/ is currently at
- *disabled* by default, because confusing to beginners
- ~C-u C-x C-n~ resets the goal column

** Mark / Select region

*Transient Mark Mode (TMM)*: minor mode for activating the /mark/ and
highlighting the /region/ (on by default)

Set a *mark* (/activates/ it; press again to /deactivate/ the mark):
: C-SPC / C-@ : set-mark-command
- or press ~C-g~ which also /deactivates/ the mark
- the mark is /not/ removed after deactivating it
- each mark is saved in the /mark ring/

Mark while moving the cursor /(conventional shift-selection)/:
: S+<left>, …

Jump to a /marked/ position:
: C-u C-SPC
- repeated calls go further back the /mark ring/
- does /not/ work across buffers

Exchange /point/ and /mark/ and /reactivate/ the last /region/:
: C-x C-x : exchange-point-and-mark

- *mark ring:* contains all marks that have been set.
- *global mark ring:* also works across buffer boundaries

** Insert

Insert newline and leave cursor before it:
: C-o : open-line

Toggle ~overwrite-mode~ to overwrite each char under cursor:
: <insert> : overwrite-mode

** Delete

Delete char before cursor:
: DEL : backward-delete-char-untabify
Delete backwards until next word beginning:
: M-DEL : backward-kill-word

Delete char under cursor:
: C-d : (delete-char <n> <?KILLFLAG>)
- as a command, kills ~n~ following or (if negative) previous chars
Delete until next word ending:
: M-d : kill-word

Delete until line ending:
: C-k : kill-line
- if cursor is at line ending, deletes the next line
- delete multiple lines with ~C-u <n> C-k~

Delete until end of sentence:
: M-k : kill-sentence

** Indent

Indent with ~TAB~.

Indent (?outdent) a /region/:
: C-M-\ : indent-region

To manually increase/decrease indentation of a /region/:
: C-x TAB : indent-rigidly
- always starts from the /mark/, even if the /region/ is not visible

** Search / Replace

: C-r : isearch-backward
: C-s : isearch-forward
- repeat ~C-r~ or ~C-s~ to go to next match in backward/forward direction
- ~M-s M-<~ to go to first, ~M-s M->~ to go to last match
- ~RET~ exits search, leaving /point/ at location found
- ~C-j~ (or type LFD) to match end of the line
- … (see docs)

Replace ~from-str~ with ~to-str~ (in the current /region/):
: M-x (replace-string <from-str> <to-str> …)
- if no /region/ (selection) is visible, searches the entire /buffer/

** Undo / Redo
Undo changes:
: C-/  /  C-_  /  C-x u  : undo

Redo changes (undo the ~undo~ call):
: C-g <undo>
- can be any other command that breaks a repeated ~undo~ call, which adds the
  undone items as /redo records/ to the *undo ring* so that they can be /redone/
  by the next ~undo~ calls

Classic /redo/ behavior /(Emacs 28+)/:
: C-? / C-M-_ : undo-redo
- use after normal ~undo~ or ~undo-only~ (which will not /redo/ undo)
- won’t push the “redo” step to the /undo ring/

** Copy / Paste

Kill /(cut)/ text between point and mark:
: C-w : kill-region
- deletes up to mark

Save /(copy)/ the region as if it was /killed/ but don’t kill it:
: M-w : kill-ring-save
- copies up to mark

Reinsert /(paste)/ the most recent /kill/ or /yank/:
: C-y : yank

(?) Re-insert previously deleted text parts:
: M-y : yank-pop
- multiple times to go further back in /kill ring/

** S-expressions
These commands work in any /major mode/ and on any /balanced expression/
(which can span multiple lines):
- *strings:* ~"…"~, ~'…'~
- *brackets:* ~[…]~, ~(…)~, ~{…}~, ~<…>~
- also depends on the /syntax table/ of the particular /major mode/
- for any /unbalanced expression/ (like regular text), they behave like the
  commands that act on /words/

Move forward/backward by /s-expression/:
: C-M-f : forward-sexp
: C-M-b : backward-sexp

Move down/into the nearest /list/:
: C-M-d : down-list
Move up/out of the current /list/ (or /string/):
: C-M-u : backward-up-list

Move to next/previous /list/:
: C-M-n : forward-list
: C-M-p : backward-list

Delete the /s-expression/ following the /point/:
: C-M-k : kill-sexp

Complete the text/symbol at /point/:
: C-M-i : completion-at-point

** Other text objects

Move to beginning/end of /defun/ (loosely for some kind of block in
programming languages or text):
: C-M-a : beginning-of-defun
: C-M-e : end-of-defun

Move forward/backward one /page/:
: C-x ] : forward-page
: C-x [ : backward-page

* Emacs Lisp (elisp)

To open [[https://www.gnu.org/software/emacs/manual/eintr.html][An Introduction to Programming in Emacs Lisp]]:
: C-h R eintr
- Emacs 28+

** Interactive commands

To be used as a /command/ and called via a /keybinding/, a function must be made
*interactive*, e.g.:
#+begin_src elisp
(defun my-command ()
  "This is an interactive command."
  (interactive)
  (print "It worked!"))

(global-set-key (kbd "C-x c") 'my-command)
#+end_src

*Non-interactive* functions can still be called /interactively/ with a
keybinding using a /lambda function/:
#+begin_src elisp
(defun non-interactive-function ()
  (print "It worked!"))

(global-set-key (kbd "C-x c")
                (lambda () (interactive) (non-interactive-function)))
#+end_src


* Built-in modes
** ORG mode
See [[file:orgMode.org][Docs/OrgMode]]

Navigate quickly by using single keys at the beginning of an Org headline:
: (setq org-use-speed-commands t)
- see https://orgmode.org/manual/Speed-Keys.html
- to show currently active Speed Keys: ~M-x org-speed-command-help~ or ~?~ when
  point is at the beginning of an org headline

** Dired (file-/directory manager)
** Icomplete / IDO / FIDO
:PROPERTIES:
:CUSTOM_ID: icomplete
:END:
Icomplete global minor mode
: M-x icomplete-mode / (setq icomplete-mode t)

Continuously displays a list of possible completions that match the typed
string.

*Usage:* select the first completion in the list with ~C-j~. To make an item in
the list the first one, either:
1. type some initial letters (can be anywhere in the string)
2. use ~C-.~ and ~C-,~ to rotate the list

~C-M-i~ will just autocomplete without selecting.

*** Ido mode / Fido mode

*Ido mode:* “Interactively DO things”
- https://www.masteringemacs.org/article/introduction-to-ido-mode

*Fido mode:* “Fake Ido” – similar to /Icomplete mode/ but retains some
functionality from Ido mode.
- uses ~flex~ as the default completion style
: M-x fido-mode / (setq fido-mode t)

Keybindings in the /minibuffer/:
- ~RET / C-m~ to confirm & autocomplete
- ~M-j~ to confirm /without/ autocomplete (e.g. to create a new buffer)
- ~C-.~ and ~C-,~ to rotate the list
- ~DEL~ to move up in path/directory
- ~C-k~ to delete files and kill buffers in-list

*Recommended:* IDO for Emacs 26-, FIDO for Emacs 27+.
** Repeat Mode
/(Emacs 28+)/

- https://karthinks.com/software/it-bears-repeating/

Enable repeat-mode:
: M-x repeat-mode
: (setq repeat-mode t)

Lookup commands supported by repeat-mode:
: M-x describe-repeat-maps

Exit transient repeating mode by typing any other key. Or set a custom exit
key (~<return>~ is recommended):
: (setq repeat-exit-key "<return>")

* Extensions
** Magit (Git manager)
** Eshell (shell access)
** Tramp (remote file editing)
** Symbolic Calculator
** Undo Tree
Alternative /undo/ implementation.
- https://www.emacswiki.org/emacs/UndoTree
** Evil mode (vi for Emacs)
:PROPERTIES:
:CUSTOM_ID: evil-mode
:END:
- https://github.com/emacs-evil/evil
- https://www.emacswiki.org/emacs/Evil

** Other
- [[https://emacspeak.sourceforge.net][Emacspeak]] (speech interface for visually impaired people)
- EMMS (Emacs multimedia system) (interactive media browser & music player)
