#+TITLE: Docs/OrgMode

- Manuals: https://orgmode.org/manuals.html
- [[https://www.youtube.com/watch?v=SzA2YODtgK4][Getting Started With Org Mode]] (YouTube presentation)
- https://gist.github.com/drj42/1755992 (Keybinding Cheatsheet)

* General
** Prerequisites
In order for Org mode to work properly, make sure the following modes are
activated:
- ~font-lock-mode~
- ~transient-mark-mode~
  - can also be a hook to use only in Org mode:
    : (add-hook 'org-mode-hook #'turn-on-font-lock)

** Keywords
Main types:
- ~TODO~
- tags, e.g. ~:work:~ /(user-defined)/, ~:ARCHIVE:~ /(reserved)/
- property names

Other types:
- option keywords, e.g. ~#+title:~
- environment keywords, e.g. ~#+BEGIN_EXPORT html~

* Headlines / Outline Tree
Headlines define the structure of an outline tree.

An empty line after the end of a subtree is considered part of it and is
hidden when the subtree is folded. Leaving at least two empty lines, one of
them remains visible after folding the subtree.
- see variable ~org-cycle-separator-lines~ to modify this behavior

Example:
: * Top level headline
: ** Second level
: *** Third level
:     some text
: *** Third level
:     more text
: * Another top level headline

** Tree Navigation

Move to previous/next (visible) heading line:
: C-c C-p : org-previous-visible-heading
: C-c C-n : org-next-visible-heading

Move backward/forward to previous/next (visible) heading on the same level:
: C-c C-b : org-backward-heading-same-level
: C-c C-f : org-forward-heading-same-level

Move upwards to the (visible) heading line of the parent subtree:
: C-c C-u : outline-up-heading

Jump to a selected node in the outline, keeping current visibility:
: C-c C-j : org-goto
- shows a copy of the current buffer in an /indirect buffer/, in overview mode
- with /universal argument/, uses the *alternative interface*, where headings
  can be entered/selected in the minibuffer
- set ~org-goto-auto-isearch~ to nil to disable automatic searching by typing
  letters and enable many more keybindings (as shown below)

Special keybindings in the *org-goto* buffer:
| Binding               | Description                                   |
|-----------------------+-----------------------------------------------|
| ~RET~                   | jump to node at point (exiting org-goto)      |
| ~q~ / ~C-g~               | cancel / exit the buffer                      |
| ~/~                     | use ~org-occur~ & isearch to search headings    |
| ~p~ / ~n~ (~<up>~ / ~<down>~) | move to previous/next heading                 |
| ~b~ / ~f~                 | move backwards/forwards on same heading level |
| ~u~                     | move upwards to parent heading                |
| ~TAB~                   | cycle subtree visibility                      |

** Tree Editing
Insert a new heading below the point or (when point is on the first ~*~) above
the current heading:
: M-RET : org-meta-return → org-insert-heading
- inserts one empty line between point and heading
- set ~org-M-RET-may-split-line~ to nil to avoid splitting headings

Insert a new heading below the current subtree (respecting content):
: C-RET : org-insert-heading-respect-content

Move current subtree (when point is on heading line) up/down:
: M-<up> : org-metaup → org-move-subtree-up
: M-<down> : org-metadown → org-move-subtree-down

Promote/demote current heading (when point is on its line):
: M-<left> : org-metaleft → org-do-promote
: M-<right> : org-metaright → org-do-demote

Promote/demote entire subtree (when point is on heading line):
: M-S-<left> : org-shiftmetaleft → org-promote-subtree
: M-S-<right> : org-shiftmetaright → org-demote-subtree

Move entry/entries at point to another heading:
: C-c C-w : org-refile

Sort all child nodes of the current heading:
: C-c ^ : org-sort → org-sort-entries

** Tree Visibility

To fix the subtree visibility, set ~STARTUP~ to one of the following values:
| Value                       | Description                               |
|-----------------------------+-------------------------------------------|
| ~#+STARTUP: fold~ / ~overview~  | show only top-level headings              |
| ~#+STARTUP: nofold~ / ~showall~ | show all headings & content but no drawer |
| ~#+STARTUP: content~          | show all headings /without/ the content     |
| ~#+STARTUP: show<n>levels~    | ~<n>~ = 2..5                                |
| ~#+STARTUP: showeverything~   | show all the text in the buffer           |

For Org buffers globally, set the variable ~org-startup-folded~ instead.

Cycle subtree at point:
: <TAB> : org-cycle
- states:
  :          ,-> FOLDED -> CHILDREN -> SUBTREE --.
  :          '-----------------------------------'
- with ~C-u~ prefix, behaves like ~org-global-cycle~ 
- with ~C-u C-u~ prefix, switches to startup visibility
- with ~C-u C-u C-u~ prefix, behaves like ~org-fold-show-all~
- on an empty headline or list item promotes/demotes it
  - useful to quickly create document structure

Cycle globally through all subtrees:
: S-<TAB> : org-shifttab → org-cycle-global / org-global-cycle
- states:
  :          ,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
  :          '--------------------------------------'

Show all contents in the visible part of the buffer:
: M-x org-fold-show-all
- by default, shows headings, blocks and drawers

(?) Reveal context around point (current entry, following headings and the
hierarchy above):
: C-c C-r : org-reveal
- (?) with ~C-u~, shows, on each level, all sibling headings
- (?) with ~C-u C-u~, goes to parent and shows the entire tree
- (?) useful for working near a location exposed by a sparse tree or an
  agenda command
- [ ] TODO: figure this out

Expose all the headings of the subtree, but not their bodies:
: C-c C-k : org-kill-note-or-show-branches → org-fold-show-branches

Expose all direct children of the subtree:
: C-c <TAB> : org-fold-show-children
- binding overwritten on Mac by ~mac-previous-tab-or-toggle-tab-bar~

Show current subtree in an indirect buffer:
: C-c C-x b : org-tree-to-indirect-buffer
- see [[file:emacs.org::#indirect-buffer][Docs/Emacs → Indirect buffer]] or [[info:emacs#Indirect Buffers][emacs#Indirect Buffers]]
- this takes various prefix args -> see docs

Focus on the current subtree, hiding other parts of the tree:
: C-x n s : org-narrow-to-subtree
Defocus the subtree, returning to normal view:
: C-x n w : widen
Bind ~org-toggle-narrow-to-subtree~ to toggle between both.

** Copying Outlines
Mark the current subtree:
: C-c @ : org-mark-subtree

Copy current *subtree*:
: C-c C-x M-w : org-copy-special → org-copy-subtree

The variable ~org-yank-folded-subtrees~ can be set to nil to avoid folding of
yanked subtrees.

Copy *visible parts* of the region/outline:
: C-c C-x v : org-copy-visible

* Drawers
Drawers allow for /sporadic/ access to general text information.
- can contain any kind of information, but they cannot be nested
- multiple drawers can be inserted anywhere under the same heading
- set the variable ~org-export-with-drawers~ to include drawers in *export*

: :DRAWER-NAME:
: …
: :END:

~TAB~ toggles visibility of drawer contents.

*Insert* a drawer at point:
: C-c C-x d : org-insert-drawer
- with an active /region/, wraps the drawer around the selected text
- prefix ~C-u~ to insert a ~PROPERTIES~ drawer underneath the heading

Example:
:my-drawer:
This is some sporadic information.
:END:

** PROPERTIES Drawer
See [[#properties]]

** LOGBOOK Drawer
See [[#agenda]]

* Notes
Add a /timestamped/ note to the current heading/entry:
: C-c C-z : org-add-note

* Properties / Metadata
:PROPERTIES:
:CUSTOM_ID: properties
:END:

Properties are /key-value pairs/. They can be associated with a node in the
heading hierarchy, with a list item or with the whole buffer.
- keys are /case-insensitive/
- the same property can only have /one entry per drawer/

To apply to an /entry/ or /tree/, they need to be in a ~PROPERTIES~ *drawer*, right
below the headline and (when applicable) its /planning line/:
: * My headline
:   :PROPERTIES:
:   :My_Field: My value
:   …
:   :END:
- properties are not inherited by default, see [[#property-inheritance][Property Inheritance]]

To apply to the /whole buffer/, they need to be defined at the top of the buffer
(allowing only comments above):
: #+PROPERTY: My_Field My value
: …

A particular property ~Xyz~ can be given a set of /allowed values/, which are
defined by setting the special property ~Xyz_ALL~, which will be /inherited/ by
the whole tree:
: #+PROPERTY: My_Field_ALL 1 2 3 4
: :My_Field_ALL: Foo "My value" bar
- makes value selection easier and less prone to typing errors

To /add/ to the value of an existing property, append a ~+~ to its name:
: #+PROPERTY: var  foo=1
: #+PROPERTY: var+ bar=2
- in the example, ~var~ will have the value ~foo=1 bar=2~

_Commands:_

*Complete property keys*, after an initial colon in a line:
: C-M-i : complete-symbol → completion-at-point
- all keys used in current file are possible completions
- previously ~pcomplete~ (~M-<TAB>~), which is now obsolete

*Set a property*, using the minibuffer interface:
: C-c C-x p : org-set-property
- creates /property drawer/, if necessary

Set a *property-value pair*:
: C-c C-x P : org-set-property-and-value

~C-u C-c C-x d : org-insert-drawer~ inserts a ~PROPERTIES~ drawer directly.

*Execute property commands*, if point is in a property drawer:
: C-c C-c : org-ctrl-c-ctrl-c → org-property-action
- ~s~: set a property
- ~d~: delete a property
- ~D~: globally delete a property from all entries in current buffer
- ~c~: compute property at point, using operator and scope from the nearest
  /column format definition/

*Switch property* to previous/next allowed value:
: S-<left>  : org-shiftleft → org-property-previous-allowed-value
: S-<right> : org-shiftleft → org-property-next-allowed-value

** Property Inheritance
:PROPERTIES:
:CUSTOM_ID: property-inheritance
:END:
Properties can be inherited by sublevels in a tree, but this functionality
has to be enabled first:
: (setq org-use-property-inheritance t)
- *Warning:* can cause significant overhead when doing a search
- can also be given a list of properties that should have inheritance or a
  regex maching properties that should be inherited

Inherited properties can also be *added to*:
: * Headline
:   :PROPERTIES:
:   :var: foo=1
:   :END:
: ** Subheadline
:    :PROPERTIES:
:    :var+: bar=2
:    :END:

Some *special properties* use inheritance by default in some circumstances
(not in searches):
- ~CATEGORY~ for agenda view, to apply to the entire subtree
- ~ARCHIVE~ to define the archive location for the entire subtree
- ~COLUMNS~ to define the [[#column-view][Column View]] format for a tree
- ~LOGGING~ to define logging settings for an entry or a subtree
- properties ending in ~_ALL~

Property values set with the *global* variable ~org-global-properties~ can be
inherited by all entries in all Org files.

See: [[info:org#Property Inheritance][org#Property Inheritance]]

** Searching
The same commands as for [[#tag-searches][Tag Searches]] are used, plus a special command:

Create a sparse tree based on a single property:
: C-c / → p : org-sparse-tree → …
- prompts for the name, then for the value of a property
- enclosing the value in ~{…}~ interprets it as a regex, matching it against
  the property values

** Special Properties
Should not be used as keys in the /property drawer/.

| Property     | Description                                               |
|--------------+-----------------------------------------------------------|
| ~ALLTAGS~      | All tags, including inherited ones.                       |
| ~BLOCKED~      | ~t~ if task is currently blocked by children or siblings.   |
| ~CATEGORY~     | The category of an entry.                                 |
| ~CLOCKSUM~     | The sum of CLOCK intervals in the subtree. ~org-clock-sum~  |
|              | must be run first to compute the values in the current    |
|              | buffer.                                                   |
| ~CLOCKSUM_T~   | The sum of CLOCK intervals in the subtree for today.      |
|              | ~org-clock-sum-today~ must be run first to compute the      |
|              | values in the current buffer.                             |
| ~CLOSED~       | When was this entry closed?                               |
| ~DEADLINE~     | The deadline timestamp.                                   |
| ~FILE~         | The filename the entry is located in.                     |
| ~ITEM~         | The headline of the entry.                                |
| ~PRIORITY~     | The priority of the entry, a string with a single letter. |
| ~SCHEDULED~    | The scheduling timestamp.                                 |
| ~TAGS~         | The tags defined directly in the headline.                |
| ~TIMESTAMP~    | The first keyword-less timestamp in the entry.            |
| ~TIMESTAMP_IA~ | The first inactive timestamp in the entry.                |
| ~TODO~         | The TODO keyword of the entry.                            |
- Source: [[info:org#Special Properties][org#Special Properties]]

** Column View
:PROPERTIES:
:CUSTOM_ID: column-view
:END:

Allows for an overview and quick editing of property values in the buffer.
- best used with outline visibility

To define columns for a *subtree*, use the ~COLUMNS~ property on the top node:
: :COLUMNS: %25ITEM %TAGS %PRIORITY %TODO
For the whole *buffer*, use ~#+COLUMNS~ instead.

A *column definition* sets the attributes of a column. The general definition
looks like this:
: %[WIDTH]PROPERTY[(TITLE)][{SUMMARY-TYPE}]
- all items, except for ~%~ and the property name, are /optional/
- ~WIDTH~: width of the column in number of characters
- ~PROPERTY~: name of the property
- ~TITLE~: header text of the column (else uses property name)
- ~SUMMARY-TYPE~: how the column values for parent nodes are computed from
  their children (if specified)
  - for a list of all available types, see [[info:org#Column attributes][org#Column attributes]]
  - set ~org-columns-summary-types~ to define custom types

Example columns definition, along with allowed values:
: :COLUMNS:  %25ITEM %9Approved(Approved?){X} %Owner %11Status \
:                    %10Time_Estimate{:} %CLOCKSUM %CLOCKSUM_T
: :Owner_ALL:    Tammy Mark Karl Lisa Don
: :Status_ALL:   "In progress" "Not started yet" "Finished" ""
: :Approved_ALL: "[ ]" "[X]"

---

Activate column view for the subtree at point:
: C-c C-x C-c : org-columns
- if point is before the first headline, activates it for the whole buffer,
  using the ~#+COLUMNS~ definition
- if point is somewhere else, searches the outline upwards for a ~COLUMNS~
  property and constructs the table for the tree starting at the entry that
  contains it
- if no columns property is found, uses the format from the variable
  ~org-columns-default-format~

Exit column view:
: C-c C-c : q (on a column) : org-columns-quit

Refresh column view (to include recent changes):
: r OR g (on a column) : org-columns-redo

Show full value of property at point:
: v : org-columns-show-value
- useful if width of the column is smaller than that of the value

_Navigating_

: <left> / <right> / <up> / <down>

Directly select the Nth allowed value (~0~ to select the 10th value):
: 1..9 / 0

Switch to next/previous allowed value in the field:
: n : S-<right> : org-columns-next-allowed-value
: p : S-<left>  : org-columns-previous-allowed-value

_Editing values_

Edit the property value at point:
: e : org-columns-edit-value

Toggle checkbox (if one exists at point):
: C-c C-c : org-columns-toggle-or-columns-quit

Edit the list of allowed values for property at point:
: a : org-columns-edit-allowed
- if not found in the hierarchy, creates the list for the first entry of the
  current column view

_Modifying columns view_

Make column narrower/wider by one character:
: < : org-columns-narrow
: > : org-columns-widen

Insert a new column to the left of the current column:
: S-M-<right> : org-columns-new

Delete the current column:
: S-M-<left> : org-columns-delete

* Special Characters / Entities

Enter a special character as unicode with ~C-x 8 RET~ .

Escape characters:
- e.g. ~\nbsp~ (non-breaking space) or ~\zwsp~ (zero-width space)
- see https://emacs.stackexchange.com/a/70505

*Entities* are special symbols that can be inserted with a LaTeX-like syntax.
- with ~org-toggle-pretty-entities~ (~C-c C-x \~) they can be rendered in emacs
- e.g. \alpha will render as α
- use \vbar in tables to insert a literal pipe

* Markup
** Text formats

*Bold*, /italic/, =verbatim=, +strikethrough+, ~code~

: C-c C-x C-f */~...  formats a selected region of text

** Lists
Lists are structurally separated by at least 2 line breaks.

A *list item* ends on a line with a /lower indentation/ than itself.
- multiple lines with the same indentation can be added below it

_Commands_

Insert a new list item /above/ the item at point or /below/, if point is placed
after the first char of the item:
: M-RET : org-meta-return → org-insert-item
to insert a /TODO/ item:
: M-S-RET : org-insert-todo-heading

Move list item at point /up/down/:
: M-<up> : org-metaup → org-move-item-up
: M-<down> : org-metadown → org-move-item-down

/Outdent/indent/ list item at point:
: M-<left> : org-metaleft → org-outdent-item
: M-<right> : org-metaright → org-indent-item
or the complete list item /tree/:
: M-S-<left> : org-shiftmetaleft → org-outdent-item-tree
: M-S-<right> : org-shiftmetaright → org-indent-item-tree

Cycle /bullet type/ of list at point:
: C-c - : org-ctrl-c-minus → org-cycle-list-bullet
or change it to /previous/next/ type:
: S-<left> : org-shiftleft → org-cycle-list-bullet
: S-<right> : org-shiftright → org-cycle-list-bullet

Move point to /previous/next/ list item:
: S-<up> : org-shiftup → org-previous-item
: S-<down> : org-shiftdown → org-next-item

/Sort/ list at point:
: C-c ^ : org-sort → org-sort-list

*** Bullet Types

- bulleted
- list

  
+ bulleted
+ list

  
1. numbered
2. list
3. [@4] this item will be exported with number 4


1) numbered
2) list

*** Nested Lists
Lists can be *nested* by adding new lists on their level of indentation.
- can only have /single numbering/ (no 1.3.2)
  - actually a good thing, because nesting contains all information!
- no create-indented shortcut necessary, because pressing return indents
  automatically and you just have to write the list char

Use ~TAB~ to fold/unfold nested list items (like in headings).

_Example_

- a
- b
  1. b.a
  2. b.b
     1. b.b.a
     2. b.b.b
  3. b.c
- c
  1. c.a

** Tables
| Some | Data  |
|------+-------|
| My   | Stuff |
| is   | Here  |

*** Conversion / Export

Convert region to table or (if no region) create an empty table with a
given size (e.g. 3x6):
: C-c | : org-table-create-or-convert-from-region
- if at least one ~TAB~ on every line, assumes /tab-separation/ (TSV)
  - force with ~C-u C-u …~
- if at least one ~,~ on every line, assumes /comma-separation/ (CSV)
  - force with ~C-u …~
- ~C-u C-u C-u~ prompts for a regex to match a custom separator
- otherwise, lines are split at whitespace into fields
  - if whitespace-separator should be /at least/ ~n~ spaces: ~C-<n> …~
  - e.g. select "A  B C  D E F", type ~C-2 …~, result "| A | B C | D E F |"

Import a file as a table:
: M-x org-table-import
- can figure out the separator automatically:
  - assumes TAB when each line contains a TAB
  - assumes CSV when each line contains a comma
  - else assumes one or more SPACE characters as a separator
- prefix ~C-u C-u C-u~ to prompt for a regex to specify a separator

Export table at point to a specified file and format:
: M-x org-table-export
- defaults to TAB-separated file

Pre-config the filename and format either in the variable
~org-table-export-default-format~ or directly for all tables in a subtree:

: * Table
:   :PROPERTIES:
:   :TABLE_EXPORT_FILE: ./my-table.csv
:   :TABLE_EXPORT_FORMAT: orgtbl-to-csv
:   :END:
:   | A | B |
:   | 1 | 2 |

Built-in translator/conversion functions that use the generic translator
~orgtbl-to-generic~:
- see [[info:org#Translator functions][org#Translator functions]] on how to write custom language translator
  functions

| function          | converts to                   |
|-------------------+-------------------------------|
| ~orgtbl-to-csv~     | CSV                           |
| ~orgtbl-to-tsv~     | TSV                           |
| ~orgtbl-to-latex~   | LaTeX                         |
| ~orgtbl-to-html~    | HTML                          |
| ~orgtbl-to-texinfo~ | Texinfo                       |
| ~orgtbl-to-unicode~ | Table with unicode characters |
| ~orgtbl-to-orgtbl~  | another ~orgtbl-mode~ table     |

*** Display / Alignment

_Indentation_

The *indentation* of the table is set by the indentation of the first line.

---
_Alignment_
  
Re-align *table*:
: C-c C-c : org-ctrl-c-ctrl-c → org-table-align

~org-table-next-row~ and ~org-cycle~ also re-align the table.

---
_Visibility_

Shrink/expand current column:
: C-c <TAB> : org-table-toggle-column-width
- mouse hovering shows a tooltip with the full text of a shrunk field
- ~C-h . : display-local-help~ will also reveal the contents

Expand all columns:
: C-u C-u C-c <TAB> : org-table-expand

Insert a *width cookie* ~<N>~ into an empty field of a column to fix the size
of that column when it shrinks:
|             | <20>               | <5>                |
| Flex column | Large fixed column | Small fixed column |
|-------------+--------------------+--------------------|

Shrink columns with a /width cookie/ and expand all others:
: C-u C-c <TAB> : org-table-shrink

To automatically /shrink/ all columns with a /width cookie/ on file visit,
either (locally) add this property to the file header:
: #+STARTUP: align shrink
or (globally) set the variable ~org-startup-shrink-all-tables~ to non-nil.

See [[info:org#Column Width and Alignment][org#Column Width and Alignment]] for more infos about column shrinking.

---
_Sorting_

Sort table lines:
: C-c ^ : org-sort → org-table-sort-lines

---
_Coordinates / Meta information_

Toggle coordinate overlay:
: C-c } : org-table-toggle-coordinate-overlays

Get infos about the current *field*:
: C-c ? : org-table-field-info

*** Rows

Move to next row and re-align table:
: RET : org-return → org-table-next-row
- creates new rows at the end of the table or before /h-lines/

Insert *row* above:
: M-S-<down> : org-table-insert-row
Delete current *row*:
: M-S-<up> : org-table-kill-row

Swap/move current *row* up/down:
: M-<up> : org-table-move-row-up
: M-<down> : org-table-move-row-down

*** Columns

Insert *column* to the left:
: M-S-<right> : org-table-insert-column
Delete current *column*:
: M-S-<left> : org-table-delete-column

Swap/move current *column* left/right:
: M-<left> : org-table-move-column-left
: M-<right> : org-table-move-column-right

*** Horizontal lines /(h-lines)/

Automatically filled when ~|-~ with one or more dashes is present and the
table gets re-aligned.

Rows before the first horizontal rule are *header lines*.

Insert *h-line* below (or above with ~C-u~):
: C-c - : org-table-insert-hline
Insert *h-line* and move to line below it:
: C-c RET : org-ctrl-c-ret → org-table-hline-and-move

*** Fields

Move to next *field* and re-align *table*:
: TAB : org-cycle → org-table-next-field & org-table-align
- creates new rows at the end of the table
- skips /h-lines/
Move to previous *field*:
: <backtab> : org-shifttab → org-table-previous-field
- skips /h-lines/
Move to beginning/end of *field*:
: M-a : org-table-beginning-of-field
: M-e : org-table-end-of-field

Delete *field* content:
: C-c d : org-table-blank-field
Copy *field* to next row:
: S-<return> : org-table-copy-down
Edit current *field* in edit buffer:
: C-` : org-table-edit-field

Move cell up by swapping with adjacent cell:
: S-<up> : org-table-move-cell-up
Move cell down by swapping with adjacent cell:
: S-<down> : org-table-move-cell-down
Move cell left by swapping with adjacent cell:
: S-<left> : org-table-move-cell-left
Move cell right by swapping with adjacent cell:
: S-<right> : org-table-move-cell-right

Cut *region/field(s)*:
: C-c C-x C-w : org-cut-special → org-table-cut-region
Copy *region/field(s)*:
: C-c C-x M-w : org-copy-special → org-table-copy-region
Paste rectangular *region/field(s)* (ignores separator lines):
: C-c C-x C-y : org-paste-special → org-table-paste-rectangle

Wrap region/field(s) in a column like a paragraph:
: (overwritten?) C-c C-w : org-table-wrap-region

*** Calculations
See [[info:org#The Spreadsheet][org#The Spreadsheet]]

Type ~:=<formula>~ to enter a formula in a field, followed by ~TAB~ to apply
the calculation. Or use the keybinding ~C-c =~.

Table *formulas* are automatically added underneath the table like this:
: #+TBLFM: <formula1>::<formula2>::…
- ~::~ concatenates the formulas to a single string

Field reference symbols:
- ~@~ → row
- ~$~ → column
- ~>~ → (?) last element in a range
- *Note:* use ~C-c }~ or ~C-c ?~ to see field reference information.

Special combinations:
- ~@#~ → current row number
  - e.g. ~$1=@#-1~ assigns each row number to the first column

A table can be referenced from another table by adding a name above it:
: #+TBLNAME: <name>
… and using ~remote(<name>, …)~ to apply a formula to that table

Calculation functionality comes from [[info:calc#Top][Calc]] (GNU Emacs Calculator).

Different functions can be used in formulas:
| Function                | Description                         |
|-------------------------+-------------------------------------|
| ~<x>..<y>~                | create range from cell ~x~ to ~y~       |
| ~vsum(<list>)~            | sum all numbers in a list           |
| ~remote(<TBLNAME>,<fml>)~ | reference values from another table |

*Ranges* are lists of numbers, e.g. ~[1, 2, 3]~

_Commands_

*Set a formula* for the *column* (or *field* with ~C-u~):
: C-c = : org-table-eval-formula

*Recalculate* field values:
: C-c * : org-ctrl-c-star → org-table-recalculate
- or ~C-u C-c C-c~ to realign table and recalculate

*Call formula editor* for all fields:
: C-' : org-edit-special → org-table-edit-formulas
- ~C-c C-c~: save & exit
- ~S-<arrow-keys>~: shift field reference

*Toggle formula debugger*:
: C-c C- { : org-table-toggle-formula-debugger
- shows debug info on recalculation

*** Graphs /(Org Plot)/
See [[info:org#Org Plot][org#Org Plot]] and [[file:emacs-calc.org::#graphs][Emacs Calc / Graph Output]]

Plot table at point using /Gnuplot/:
: C-c " g : org-plot/gnuplot
- set options using ~#+PLOT: …~ directly before or after the table

Plot /ASCII-art/ bars in a new column of the table:
: C-c " a : orgtbl-ascii-plot
- a formula to (re)calculate the column gets added to ~#+TBLFM~
  - it looks like: ~(orgtbl-ascii-draw <value> <min> <max> <width>)~
  - ~value~ → the value (column) to plot
  - ~min~ → the value to display as an empty bar
  - ~max~ → the value filling all the ~width~
  - ~width~ → the number of characters for the plot (default: 12)

~org-plot~ options:
- ~title:"<s>"~ → title of the plot
- ~ind:<n>~ → index column /c/ to use for the /x-axis/
- ~deps:(<n> …)~ → columns to graph (as a Lisp-style list)
  - defaults to all columns except the one in ~ind~
- ~type:<x>~ → plot type (by default one of ~2d~, ~3d~, ~radar~ or ~grid~)
  - customize available types with ~org-plot/preset-plot-types~
- ~with:<opt>~ → one of ~lines~, ~points~, ~boxes~, ~impulses~, ~histograms~, … for
  every column being plotted
  - default: ~lines~
- ~labels:(<s> …)~ → list of labels to be used for ~deps~
  - default: column headers (if they exist)
- ~min:<n> / max:<n>~ → minimum/maximum axis value (assumes /y/-axis)
  - use ~xmin / xmax~ or ~ymin / ymax~ to explicitly specify the axis
- ~ticks:<n>~ → number of axis ticks to display
- ~transpose:<y|yes|t>~ → attempts to transpose table data before plotting
  - also recognizes the shorthand option ~trans~
- ~timefmt:<fmt>~ → format of timestamps as they will be parsed by Gnuplot
  - default: ~%Y-%m-%d-%H:%M:%S~
- ~set:"<opt>"~ → specify any Gnuplot option to be set when graphing
- ~file:"<path>"~ → to plot to a file
- ~line:<?>~ → specify an entire line to be inserted in the Gnuplot script
- ~map:<t>~ → flat mapping rather than a ‘3d’ slope in ~3d~ or ~grid~ types
- ~script:"<path>"~ → specify a /script file/ to be used to plot

*** ~table.el~ integration
See [[file:emacs.org::#table-el][table.el by Takaaki Ota]] in =emacs.org=

Insert a ~table.el~ table with specified number of rows, cols, etc.
*or* (if point is already on a table)
convert between ~table.el~ table and org-table (→ ~org-convert-table~):
: C-c ~ : org-table-create-with-table.el

Edit a ~table.el~ table (when point is in table) in a special buffer:
: C-c ' : org-edit-special

* Links

  | Shortcut            | Action                                 |
  |---------------------+----------------------------------------|
  | C-c C-l / SPC m l l | Create/edit link / insert to selection |
  | C-c C-o / Enter     | Open link                              |
  | , l t               | toggle link display                    |
  | , l l               | org-insert-link                        |
  | SPC n l             | org-store-link                         |

** Internal Links

See https://orgmode.org/manual/Internal-Links.html

*** Across files
[[file:clojure_zip.org][clojure.zip API]]

Jump to a specific heading:
[[file:clojure_zip.org::*Inspection][clojure.zip API - Inspection]]

[[file:clojure_zip.org::*Movement][Movement]]

*** Using section names

: [[*Some section]]
- Warning: Link will break when Heading changes!

[[*Headline 1]]

**** Headline 1

xxx

*** Using IDs

: [[id:my-id]]
: [[id:my-id][Some alias]]

[[id:xyz]]

[[id:xyz][Some alias]]

To be able to store and insert links with ~ID~ properties, the variable
~org-id-link-to-org-use-id~ must be set t a non-nil value.
- see [[https://emacs.stackexchange.com/a/64240][Emacs StackExchange answer]]

**** Headline 2
:PROPERTIES:
:ID:       xyz
:END:

*** Using ~CUSTOM_ID~'s

: [[#my-custom-id]]
: [[#my-custom-id][Some alias]]

[[#my-headline]]

[[#my-headline][Some alias]]

To automatically add custom ids:
https://writequit.org/articles/emacs-org-mode-generate-ids.html

**** Headline 3
:PROPERTIES:
:CUSTOM_ID: my-headline
:END:

xxx

** Hyperlinks

[[https://formform.dev][My project]]

** Link to file

** Custom links
Register custom link types for ~org-insert-link~:
: (org-link-set-parameters …)

Example which just copies the link:
- [[https://www.youtube.com/watch?v=Pc2kpqgg8pU][Source]]
#+begin_src elisp
(org-link-set-parameters
 "copy"
 :follow (lambda (link) (kill-new link))
 :export (lambda (_ desc &rest _) desc))
#+end_src

Example to handle links with a custom URI scheme (such as ~brain://~ in
TheBrain):
#+begin_src elisp
(org-link-set-parameters
 "brain"
 :follow (lambda (path) (shell-command (concat "open brain:" path))))
#+end_src

* Tags
A tag name is surrounded by colons (like ~:foo:~).

Tags are specified at the end of a headline. Multiple tags are chained
together:
: * My books :collection:personal:

Set tags from anywhere in the document:
: C-c C-q : org-set-tags-command
- when point is in a headline, ~C-c C-c~ can be used equivalently

Special keys in tag selection interface:
| Key | Description                                |
|-----+--------------------------------------------|
| ~TAB~ | enter a tag, even if it is not in the list |
| ~SPC~ | clear all tags for this line               |
| ~RET~ | accept the modified set                    |
| ~q~   | aborts (if not assigned to a tag)          |
| ~!~   | turns off groups (as an exception)         |
| ~C-c~ | toggle auto-exit after next change         |

** Tags list

By default, Org constructs a *list of tags* /dynamically/, which contains all
tags currently used in the buffer.

The tags list can also be /fixed/ instead – either by defining default tags
for a given file, using the ~TAGS~ keyword, e.g.:
: #+TAGS: laptop car pc sailboat
Or by defining the list /globally/ by setting ~org-tag-alist~.
- the ~TAGS~ keyword overwrites the global list
- to still use a dynamic list despite globally defined tags, add an empty
  ~TAGS~ keyword to the file:
  : #+TAGS: 

To use globally defined tags in addition to the per-file ~TAGS~ keyword list,
add them to ~org-tag-persistent-alist~.
- if no ~TAGS~ are set on a file, this will add to ~org-tag-alist~ defined tags,
  but *NOT* to the dynamic list
- to turn it off on a per-file basis, add this to the file:
  : #+STARTUP: noptag

NOTE: the buffer has to be reloaded to switch between tag list preferences

** Fast Tag Selection

Set unique letters to quickly select/toggle commonly used tags.

Either globally in the ~org-tag-alist~, e.g.:
: (setq org-tag-alist '(("@work" . ?w) ("@home" . ?h)))
Or on a single file using the ~TAGS~ keyword, e.g.:
: #+TAGS: @work(w)  @home(h)

Set ~org-fast-tag-selection-single-key~ for fast tag selection after the first
key (no need to press ~RET~ to confirm).
- pressing ~C-c C-c C-c~ to set tags now toggles auto-exit off instead of on

** Tag grouping

_XOR group_

Tags can be organized into *mutually exclusive groups*. Within which they
become either-or choices, while those outside can be combined at will.

Locally with ~TAGS~, use ~{ … }~ to define groups, e.g.:
: #+TAGS: { @office(o) @home(h) } { wine(w) coffee(c) } milk(m) sugar(s)

Globally in ~org-tag-alist~, use ~:startgroup~ and ~:endgroup~ dummy tags, e.g.:
: (setq org-tag-alist '((:startgroup . nil)
:                       ("@wine" . ?w) ("@coffee" . ?c)
:                       (:endgroup . nil)
:                       ("milk" . ?m) ("sugar" . ?s)))

_Tag hierarchy_

A tag can be defined as a *group tag* for a set of other tags.

Locally, use ~[ <grouptag> : <subtags …> ]~ form to define a tag hierarchy …
: #+TAGS: [ GTD : Control Persp ]
… in which member tags can themselves become group tags:
: #+TAGS: [ Control : Context Task ]

Globally use ~:startgrouptag~, ~:grouptags~ and ~:endgrouptag~ keywords when
setting ~org-tag-alist~ directly, e.g.:
: (setq org-tag-alist '((:startgrouptag)
:                       ("GTD")
:                       (:grouptags)
:                       ("Control")
:                       ("Persp")
:                       (:endgrouptag)
:                       (:startgrouptag)
:                       ("Control")
:                       (:grouptags)
:                       ("Context")
:                       ("Task")
:                       (:endgrouptag)))

The tags in a group can also be mutually exclusive, using the same syntax as
in the *XOR group*:
: #+TAGS: { Context : @Home @Work @Call }
Likewise, for ~org-tag-alist~, use ~:startgroup~ and ~:endgroup~ instead.

Group tag members can also be regular expressions, see: [[info:org#Tag Hierarchy][org#Tag Hierarchy]]

** Searching
:PROPERTIES:
:CUSTOM_ID: tag-searches
:END:
Create a sparse tree with all matching entries/headlines:
: C-c \ : org-match-sparse-tree
: C-c / → m : org-sparse-tree → org-match-sparse-tree
- prefix ~C-u~ to ignores non-TODO headlines

Also see agenda tag search commands [[info:org#Tag Searches][here]].

~M-x org-remove-occur-highlights~ to remove the match highlights.

_Matching syntax:_

| Syntax      | Description                                    |
|-------------+------------------------------------------------|
| ~…+a~ / ~+a~    | … WITH ~a~                                       |
| ~…-a~ / ~-a~    | … WITHOUT ~a~                                    |
| ~a&b~         | a AND b (optional with ~+~ / ~-~)                  |
| ~a\vbar b~        | a OR b (ignore space)                          |
|-------------+------------------------------------------------|
| ~a~           | match tag ~a~                                    |
| ~a=x~         | match property ~a~ with value ~x~                  |
| ~a<x~ / ~a>x~   | match property ~a~ with less/more than ~x~         |
| ~a<=x~ / ~a>=x~ | … as above, but also equality                  |
| ~a<>x~        | match property ~a~ if not value ~x~                |
|-------------+------------------------------------------------|
| ~"…"~         | exactly match string, e.g. ~"foo bar"~           |
| ~"<…>"~       | match Org date/time spec:                      |
|             | - absolute time, e.g. ~"<2008-12-24 18:30>"~     |
|             | - keywords: ~"<now>"~ / ~"<today>"~ / ~"<tomorrow>"~ |
|             | - relative time, e.g. ~"<+5d>"~, ~"<-2m>"~         |
|             | with units: ~d~, ~w~, ~m~, ~y~ (day/week/month/year)   |
| ~{…}~         | perform a regex search, e.g. ~{^boss.*}~         |

- see [[info:org#Matching tags and properties][org#Matching tags and properties]] for a complete reference
  
* Source Code

*Source code block:*
: #+NAME: <?name>
: #+BEGIN_SRC <language> <?switches> <?header args …>
:   <body>
: #+END_SRC
Results are shown below after evaluation:
: #+RESULTS:
:   …
- name is optional but allowes calling the source block like a function
- see [[info:org#Languages][org#Languages]] for identifiers of supported languages

*Inline code block:*
: src_<language>{<body>}
or
: src_<language>[<header arguments>]{<body>}

- the evaluation results of code blocks can be piped into other code blocks
- functions from code blocks can be evaluated in prose text

Insert a code block:
: C-c C-, s : org-insert-structure-template → [s]rc
or for quick insertion, type ~<s + TAB~
- requires ~(require 'org-tempo)~ in config

Edit the code block at point in a separate buffer:
: C-c ' : org-edit-special → org-edit-src-code
- to modify how the dedicated buffer is opened, set the variable
  ~org-src-window-setup~
  - e.g. to ~'current-window~ to use the same window

** Evaluation

To evaluate code blocks, languages must be enabled or disabled individually
– either by setting the variable ~org-babel-load-languages~, e.g.:
: (org-babel-do-load-languages
:  'org-babel-load-languages
:  '((emacs-lisp . nil)
:    (R . t)))
or by using the ~require~ statement, e.g.:
: (require 'ob-clojure)
- see the [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][Worg website]] for language-specific documentation

Evaluate a code block, which inserts the results underneath:
: C-c C-c : org-ctrl-c-ctrl-c → org-babel-execute-src-block
: C-c C-v e : org-babel-execute-maybe
- the variable ~org-babel-no-eval-on-ctrl-c-ctrl-c~ inhibits eval with ~C-c C-c~
- the variable ~org-confirm-babel-evaluate~ can be set to ~nil~ to disable
  confirmation before evaluating a code block
  - can also be set to a function for more control, see [[help:org-confirm-babel-evaluate][docs]]

** Header Arguments
Also see [[info:org#Results of Evaluation][org#Results of Evaluation]]
  
_Setting Header Arguments_ (highest → lowest precedence)

…on /function calls/:
: #+CALL: foo(…) :<arg> <val> …   (applied to the '#+CALL:' line)
: #+CALL: foo[:<arg> <val> …](…)  (applied to the code block)

…on /source blocks/:
: #+BEGIN_SRC … :<arg> <val> …
…on /inline source blocks/:
: src_<LANG>[:<arg> <val> …]{…}
…as multi-line header arguments:
: #+HEADER: :<arg> <val> …
: #+HEADER: :<arg> <val> …
: #+BEGIN_SRC … :<arg> <val> …

…at /subtree level/, using property drawers:
: * sample header
:   :PROPERTIES:
:   :header-args:        :<arg> <val> …
:   :header-args:<LANG>: :<arg> <val> …   (language-specific)
:   :END:
- settings are inherited by deeper subheadings (unless overwritten), the
  variable ~org-use-property-inheritance~ gets ignored

… /buffer-wide/, using properties:
: #+PROPERTY: header-args        :<arg> <val> …
: #+PROPERTY: header-args:<LANG> :<arg> <val> …   (language-specific)

Header args set as properties apply to both, normal and inline code blocks.

_Defaults_

…for /source code blocks/:
: :session => "none"
: :results => "replace"
: :exports => "code"
: :cache   => "no"
: :noweb   => "no"
: :hlines  => "no"
: :tangle  => "no"
- can be customized via ~org-babel-default-header-args~

…for /inline source blocks/:
: :session => "none"
: :results => "replace"
: :exports => "results"
: :hlines  => "yes"
- can be customized via ~org-babel-default-inline-header-args~

Each language can have separate default header arguments, by customizing the
variable ~org-babel-default-header-args:<LANG>~.
- see [[https://orgmode.org/worg/org-contrib/babel/]] for language-specific docs

*** ~:results~
:PROPERTIES:
:CUSTOM_ID: :results
:END:
The primary way to determine how Org handles the results of a code block.
It accepts 4 classes of options:

- [[*Collection]] → how the results should be /collected from/ the code block
  - either in a /functional/ (return value) or /scripting/ (stdout) manner
  - /default:/ ~value~ for most Babel libraries
- [[*Type]] → which type of results will be /returned by/ the code block
  - affects how Org processes and inserts results in the Org buffer
  - /default:/ automatically determined (depends on code language)
- [[*Format]] → /format/ of the results
  - affects how Org processes results
  - /default:/ follows from the [[*Type]]
- [[*Handling]] → how results get /inserted/ once they are properly formatted
  - /default:/ ~replace~

Only one option per class can be chosen.

**** Collection
- ~value~
- ~output~
**** Type
- ~table~ / ~vector~
- ~list~
- ~scalar~ / ~verbatim~
- ~file~
**** Format
- ~code~
- ~drawer~
- ~html~
- ~latex~
- ~link~ / ~graphics~
- ~org~
- ~pp~
- ~raw~
- ~:wrap~ header argument
**** Handling
- ~replace~
- ~silent~
- ~none~
- ~discard~
- ~append~
- ~prepend~

*** ~:session~

*** ~:exports~
:PROPERTIES:
:CUSTOM_ID: :exports
:END:
- see [[info:org#Exporting Code Blocks][org#Exporting Code Blocks]]

*** ~:var~
:PROPERTIES:
:CUSTOM_ID: :var
:END:
To bind values from outside of the code block to variables inside of it.

: :var <name>=<value>

*** ~:file~
:PROPERTIES:
:CUSTOM_ID: :file
:END:

*** ~:post~
:PROPERTIES:
:CUSTOM_ID: :post
:END:
For post-processing results from block evaluation.
- code block results are bound to ~*this*~ variable, wich can be passed to
  [[#:var]] header arguments of another code block

*** ~:tangle~
:PROPERTIES:
:CUSTOM_ID: :tangle
:END:

** Switches

** Tangling
Code blocks in an =.org= file can be “tangled” together using ~org-babel-tangle~
to write them to one or more source file(s).
- useful to generate an =init.el= file from a literate Emacs config in Org
- see [[info:org#Extracting Source Code][org#Extracting Source Code]]

** Export & Publish

** Examples
#+BEGIN_SRC emacs-lisp
(message "Yeah!")
#+END_SRC

#+RESULTS:
: Yeah!

#+begin_src java
for (int i=0; i<5; i++) {
    System.out.println("Counting "+i);
}
#+end_src

Inline src_clojure{ (defn square [x] (* x x)) } source code.

* Footnotes
/Footnote references/ can be inserted in different ways:
- numbered :: e.g. ~[fn:1]~, ~[fn:2]~, …
  - *Note:* the numbers are not related to the numbering in export formats
- named :: e.g. ~[fn:Foo]~
  - technically the same as a numbered footnote
- inline anonymous :: e.g. ~[fn:: a definition]~
  - *Note:* in export formats, inline definitions may not appear inline
- inline named :: e.g. ~[fn:Bar: a definition]~
  - the name can be used for additional references, e.g. ~[fn:Bar]~

/Footnote definitions/ have to start at column 0 (no indentation) with a
/footnote marker/ (same as the reference):
: [fn:55] a definition.
- it ends at the next footnote definition, headline or after 2 consecutive
  empty lines

_Commands_

*Create a footnote*, /or – with point on an existing footnote/ – *jump to its
definition/reference*, /or – if it has none –/ *create a definition*:
: C-c C-x f : org-footnote-action
- inserts footnote labels according to ~org-footnote-auto-label~
- inserts footnote definition according to ~org-footnote-define-inline~
- prefix ~C-u~ for different actions:
  - ~d~: /delete/ footnote at point, including all references and the definition
  - ~s~: /sort/ definitions by /reference order/
  - ~r~: /renumber/ ~fn:N~ footnotes by their /reference order/
  - ~S~: /renumber & then sort/
    - *Note:* for additional references to an /inline named reference/, Org will
      insert a definition ~[fn:…] DEFINITION NOT FOUND.~ but does not overwrite
      the orignal references
  - ~n~ ormalize: /rename/ all footnotes into /numbered/ footnotes

*Quickly jump* between footnote definition and reference at point:
: C-c C-c : org-ctrl-c-ctrl-c → ?

*Edit* definition of footnote at point in a separate buffer:
: C-c ' : org-edit-special → org-edit-footnote-reference

_Variables_

~org-footnote-define-inline~ specifies how to position footnote definitions.
- ~nil~ /(default)/: under top-level heading ~* Footnotes~, which gets created near
  the end of the document (if it doesn’t already exist)
- *non-nil*: inline definition, at reference location
- ~t~: the ~[fn:label:definition]~ notation will be used to define the footnote at
  reference position
- or as an in-buffer setting:
  : #+STARTUP: fninline
  : #+STARTUP: nofninline

~org-footnote-auto-adjust~ automatically adjusts footnotes after insert/delete,
when set to *non-nil* (dafault is ~nil~).
- will /sort/ all footnotes and /renumber/ simple ~[fn:N]~ footnotes
- set to ~'sort~ or ~'renumber~ for just sorting or renumbering
- or as an in-buffer setting:
  : #+STARTUP: fnadjust
  : #+STARTUP: nofnadjust

~org-footnote-auto-label~ defines new footnote labels automatically
- ~nil~: prompts the user for each label
- ~t~ /(default)/: creates unique /numbered/ labels (~[fn:1]~, ~[fn:2]~, …)
- ~confirm~: like ~t~, but lets the user edit the created value
  - remove the label in minibuffer to creata an /anonymous footnote/
- ~random~: generates a unique, random label

* Images

Images are inserted as links to their source, e.g. ~[[file:my-image.jpg]]~ or
~[[./my-image.jpg]]~
- the ~file:~ prefix may be omitted if the file name is complete, e.g., it
  starts with ~./~, or ~/~

The image can act as a link to another image, which can be used to separate a
preview image from a high-res version: ~[[file:highres.jpg][file:thumb.jpg]]~
- click or type ~C-c C-o~ on the image to see the linked image in a new buffer
- will also work for export in html

/Metadata/ can be added for *captions*, *labels* (to link to the image from
elsewhere in the document) or *attributes* (to change display size, etc.):

To set the *width* for inline images to display at (instead of using their
actual width), either set the global variable ~org-image-actual-width~ or the
property ~ORG-IMAGE-ACTUAL-WIDTH~ (on a subtree) to a non-~t~ value.
- needs /imagemagick/ to scale the images
- see [[info:org#Images][org#Images]] for an explanation on all possible values
- *Note:* this determines if local width attributes on a single image will have
  an effect
  - (?) the property might need ~()~ instead of ~nil~ to allow width attributes
  - just set the variable to ~nil~ and never think about it again

#+CAPTION: This is an example image
#+NAME: fig:example
#+ATTR_ORG: :width 100%
[[./_res/orgMode/example.jpg]]
- [[https://en.wikipedia.org/wiki/Popigai_impact_structure][Source]]


Toggle inline images for the whole buffer:
: C-c C-x C-v : org-toggle-inline-images
- with a /prefix argument/, also display images that have a link description

To always display images at startup, set ~org-startup-with-inline-images~ to
non-nil. To set it locally per-file:
: #+STARTUP: inlineimages
: #+STARTUP: noinlineimages

To automatically display images when cycling the folding state on a subtree,
set ~org-cycle-inline-images-display~.

For customization of image export to other formats, see:
- [[info:org#Images in HTML export][org#Images in HTML export]]
- [[info:org#Images in LaTeX export][org#Images in LaTeX export]]
- [[info:org#Images in ODT export][org#Images in ODT export]]


* Export to other formats

  | Shortcut | Action      |
  |----------+-------------|
  | C-c C-e  | export menu |

C-s can also export just the subtree (current heading)

Look for "ox-<pkgname>" to find packages for export formats.

* LaTeX integration
Org mode can contain LaTeX fragments.
- in *LaTeX export*, the code is left as it is
- in *HTML export*, Org can use either [[https://www.mathjax.org][MathJax]] or transcode the math into images

LaTeX math delimiters:
: $…$
: \( … \)
: $$ … $$
: \[ … \]

Environments of any kind:
: \begin{equation}
: …
: \end{equation}

Toggle *preview* of LaTeX fragment at point /or/ preview all fragments in the
current entry/node (if none is at point):
: C-c C-x C-l : org-latex-preview
- prefix ~C-u~ to /clear/ all previews in current entry/node
- prefix ~C-u C-u~ to /preview/ all fragments in the buffer
- prefix ~C-u C-u C-u~ to /clear/ all previews in the buffer

To automatically preview all LaTeX fragments in the current buffer, set:
: #+STARTUP: latexpreview
To disable previews:
: #+STARTUP: nolatexpreview

_Variables_

~org-export-with-latex~ controls whether LaTeX is being processed in export.
- can also be set on a per-file basis, see [[info:org#LaTeX fragments][org#LaTeX fragments]]

~org-format-latex-options~ controls the rendering of images from LaTeX fragments
as in-buffer preview and in HTML export and defines the /matchers/ to find such
fragments.

~org-format-latex-header~ sets the document header used for processing LaTeX
fragments.

_Examples_

- Characters: \alpha \rightarrow \beta
- $O(n \log n)$

  \begin{align*}
    3 * 2 + &= 6 + 1 \\
            &= 7
  \end{align*}

** CDLaTeX mode (speed-up insertion of envs & math templates)
- see [[info:org#CDLaTeX mode][org#CDLaTeX mode]]

* Examples

Tag expansion:
- needs ~(require 'org-tempo)~ in config

| Typing … + TAB | Expands to …                            |
|----------------+-----------------------------------------|
| ~<a~             | ~'#+BEGIN_EXPORT ascii' … '#+END_EXPORT~  |
| ~<c~             | ~'#+BEGIN_CENTER' … '#+END_CENTER'~       |
| ~<C~             | ~'#+BEGIN_COMMENT' … '#+END_COMMENT'~     |
| ~<e~             | ~'#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'~     |
| ~<E~             | ~'#+BEGIN_EXPORT' … '#+END_EXPORT'~       |
| ~<h~             | ~'#+BEGIN_EXPORT html' … '#+END_EXPORT'~  |
| ~<l~             | ~'#+BEGIN_EXPORT latex' … '#+END_EXPORT'~ |
| ~<q~             | ~'#+BEGIN_QUOTE' … '#+END_QUOTE'~         |
| ~<s~             | ~'#+BEGIN_SRC' … '#+END_SRC'~             |
| ~<v~             | ~'#+BEGIN_VERSE' … '#+END_VERSE'~         |

** Literal

Examples are typeset in monospace and not subjected to markup.

#+begin_example
Some example from a *text* file.
,* I am no real headline (needs to be preceeded by comma)
#+end_example

For small examples:
: Some example from a text file.

** Quotation

  | Shortcut | Action                     |
  |----------+----------------------------|
  | <q + TAB | quickly insert quote block |

Shortcut: write ~<q~ & hit ENTER.

#+begin_quote
Some quoted line.
#+end_quote

* Todo

:    ,-> (unmarked) -> TODO -> DONE --.
:    '--------------------------------'

Changing TODO states can also trigger tag changes. See the docstring of the
option ~org-todo-state-tags-triggers~ for details.


Rotate the TODO state of an item:
: C-c C-t : org-todo

Select the following/preceeding TODO state (cycling):
: S-<right> : org-shiftright
: S-<left>  : org-shiftleft
- bypass logging of TODO state changes with this command by setting
  ~org-treat-S-cursor-todo-selection-as-state-change~ to nil

Toggle the state of a checkbox:
: C-c C-c : org-ctrl-c-ctrl-c

Insert a new TODO heading or checkbox (when on a list item) below:
: S-M-<return> : org-insert-todo-heading

Insert a ~DEADLINE:~ string with a timestamp to make a deadline:
: C-c C-d : org-deadline

View all TODO items of the buffer in a *sparse tree*:
: C-c /  → t : org-sparse-tree → org-show-todo-tree
- use ~T~ instead to search for a specific TODO keyword
  - ~KWD1|KWD2|…~ as input will match any keywords in that list
- ~M-x org-remove-occur-highlights~ to remove the match highlights.

Examples:

: - [-] List todo

: * DONE Heading todo

: ** TODO Heading with deadline
:    DEADLINE: <2024-03-14 Thu>

** Todo keywords

* Agenda
:PROPERTIES:
:CUSTOM_ID: agenda
:END:

* Calendars
* Capturing
Capture something using a /capture template/:
: C-c c (recommended binding) : org-capture
- prefix ~C-u~ to visit the target location of the capture template
- prefix ~C-u C-u~ to visit the last stored capture item in its buffer
  - or jump to the bookmark ~org-capture-last-stored~, which is automatically
    created unless ~org-capture-bookmark~ is nil

** Capture Templates
Capture templates are stored in ~org-capture-templates~.

See [[info:org#Capture templates][org#Capture templates]] on how to write a capture template.

* Citations
:PROPERTIES:
:CUSTOM_ID: org-cite
:END:
- using ~org-cite~, since Org 9.5

A *bibliography* must be provided before adding citations – either locally,
using one or more ~bibliography~ keywords, e.g.:
: #+bibliography: SomeFile.bib
: #+bibliography: /some/other/file.json
: #+bibliography: "/some/file/with spaces/in its name.bib"
…or globally by setting the variable ~org-cite-global-bibliography~

A *citation* requires one or more /citation keys/:
: [cite:@key] : [cite:@key;@key] : …
- can specify a /prefix/ (e.g. “see ”) and/or a /suffix/ (e.g. “p. 123”), which is
  useful for comprehension of the citation but not included in the reference:
  : cite:<prefix> @key <suffix>
  for multiple citation keys, a common prefix/suffix can be added:
  : cite:<common prefix> ;<prefix> @key <suffix>; …; <common suffix>
- can specify a /stylistic variation/ for the citations:
  : cite/<style>:…
  - usually makes sense only for author-year styles

A *citation key* identifies a reference in the bibliography and can have
different forms, e.g.:
- BibTex: ~@<author-lastname>_<title-firstword>_<publ-year>~
- CSL: ~@<id>~ (exported from Zotero, this is a URL)

  
Insert a citation:
: C-c C-x @ : org-cite-insert
- confirm with ~M-RET~, since just ~RET~ will add another citation

** Exporting Citations
An *export processor* is required to export citations to LaTeX/HTML/etc. Each
one can use different *citation and *reference styles*.
- see [[info:org#Citation export processors][org#Citation export processors]] or for infos about available processors
  - also [[https://kristofferbalintona.me/posts/202206141852/#understanding-org-cite-export-processors][Understanding org-cite export processors]] for more details
- ~csl~ is the most flexible and compatible and can export to formats like
  latex/pdf, html, odt and plain (UTF8) text
  - intended as a universal standard for citation formatting
  - it uses the [[https://en.wikipedia.org/wiki/Citation_Style_Language][Citation Style Language]] (CSL) for formatting
  - /citation styles/ are provided by =.csl= files
    - the variable ~org-cite-csl-styles-dir~ defines the path to locate CSL
      styles, e.g. ~"~/Zotero/styles"~ (for Zotero)
    - when it is set, only the filenames need to be provided
- ~natbib~, ~bibtex~ and ~biblatex~ only target LaTeX or LaTeX-derived formats
  - they only compile to LaTeX commands, while ~csl~ exports to /rendered text/
  - however, ~biblatex~ uses the LaTeX package /BibLaTeX/, which handles
    automatic selection of citation variants among other things

The variable ~org-cite-export-processors~ defines the default /back-end/, /export
processor/ and /citation/reference style/ for Org files, as a list of tuples:
: ((BACK-END . PROCESSOR) …)
- ~BACK-END~ is the name of an export back-end (e.g. ~md~, ~latex~, ~odt~) or ~t~ for
  unspecific
- ~PROCESSOR~ is a triplet ~(NAME BIBLIOGRAPHY-STYLE CITATION-STYLE)~
  - only ~NAME~ is required
  - the ~basic~ processor provides the whole triplet
- when ~nil~, citations and bibliography are not exported

Set the /export processor/ and /citation/reference style/ buffer-wide with:
: #+cite_export: <?export-processor> <?style …>
- the style only affects the /exported/ references and bibliography section,
  not how they get inserted in OrgMode (which is determined by the
  bibliography file)
- Examples:
  : #+cite_export: basic author author-year
  : #+cite_export: csl /some/path/to/vancouver-brackets.csl
  : #+cite_export: natbib kluwer

To specify where the bibliography should be placed in export:
: #+print_bibliography:
- can be inserted multiple times at different places in the document

** Zotero Integration
1. Install the [[https://retorque.re/zotero-better-bibtex/index.html][Better BibTex]] plugin
   - generates /citation keys/ without key clashes
   - can use user-defined /citekey formulas/
   - can keep exported =.bib= files in sync with changes in Zotero
2. Export a =.bib= file from a Zotero library/collection.
   - use ~Better BibLaTeX~ format
   - check ~Keep Updated~ option for sync
3. Set ~org-cite-global-bibliography~ variable in Emacs to =.bib= file path

*** zotxt-emacs (extension)
- https://github.com/egh/zotxt-emacs

** citar (extension, frontend for org-cite, etc.)
:PROPERTIES:
:CUSTOM_ID: citar
:END:
- https://github.com/emacs-citar/citar
- also see: https://kristofferbalintona.me/posts/202206141852/#citar
- front-end to browse and act on BibTeX, BibLaTeX, and CSL JSON
  bibliographic data, and LaTeX, markdown, and org-cite editing support
- adds the citar citation-insert processor

*** citar-org


** citeproc (extension, citation processor required for CSL export)
- https://github.com/andras-simonyi/citeproc-el

** org-ref (extension, org-cite alternative)
:PROPERTIES:
:CUSTOM_ID: org-ref
:END:
- https://github.com/jkitchin/org-ref

Citation form:
: cite:key

