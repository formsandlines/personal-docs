#+title: Docs/Java

Referenz:
- [[https://docs.oracle.com/javase/specs/jls/se17/html/index.html][The Java® Language Specification]]
- [[https://docs.oracle.com/en/java/javase/17/docs/][API Specification (Java SE 17 & JDK 17)]]

Learn:
- [[https://docs.oracle.com/javase/tutorial/index.html][The Java Tutorials]] (Oracle)
- [[https://www.ibm.com/blog/jvm-vs-jre-vs-jdk/][JVM vs. JRE vs. JDK: What’s the Difference?]]
- [[https://cscircles.cemc.uwaterloo.ca/java_visualize/][Java Visualizer]]

* Installation

Install JDK:
: $ brew install java

Install Maven:
: $ brew install maven
- see also: https://mkyong.com/maven/install-maven-on-mac-osx/

(?) Symlink for system Java wrappers to find JDK:
: $ sudo ln -sfn /usr/local/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk

To get list of all installed JDKs:
: $ /usr/libexec/java_home -V

To install GraalVM:
- https://www.graalvm.org/22.0/docs/getting-started/macos/
- https://www.graalvm.org/22.0/reference-manual/native-image/

** Editor support

IntelliJ IDEA CE

VS Code via Microsoft and Red Hat plugins

Neovim, e.g. via ~coc-java~
- https://github.com/neoclide/coc-java
- to solve lang. server connection issues:
  https://github.com/neoclide/coc-java/issues/243#issuecomment-1555274940

* Environment
** Resources
*** Java Development Kit (JDK)
Required by the programmer to develop Java applications.

Includes:
- *Java standard library*
- *Java compiler* (source -> Java bytecode)

*** Java Runtime Environment (JRE)
Required by the user to run a Java application.
- often bundled with the app
- system-dependent

Includes:
- *Java standard library*
- *Java interpreter*

** Runtime

To run a *class from source*:
: $ java MyClass
: -cp  : specify a different classpath (default is '.')
- if one of the class files depends on a =.jar= file, its path must be added to
  the [[Classpath]]

To run an *application packaged as a JAR*:
: $ java -jar <filename>.jar
- requires the ~Main-class~ manifest header
** Interactive Shell
: jshell

** Classpath

List of directories and [[JAR files]], where the ~ClassLoader~ will try to look for
[[Class files]] at runtime.
- seperated by colons ~:~ (Unix) or semicolons ~;~ (Windows).

Examples:
- ~..:.~ -> current and parent dir
** Package
The package is defined in the first line of a =.java= file:
: package <pkgname>;

To import a class from a package:
: import <pkgname>.<classname>;
- naming convention:
  ~<org.name>.<appname>.<pkgname>.<inner-pkgname>.<classname>~
To import everything from a package:
: import <pkgname>.*

Source files that belong to the same package should be in the same directory
that must have the name of the package.

Compilation and execution must be from root directory:
: javac <pkgname>/<filename>.java
: java <pkgname>/<filename>

** Class files

To *compile* a source file to Java bytecode:
: $ javac <filename>.java
: -cp  : specify a different classpath (default is '.')
- all source files that ~filename.java~ depends on will also be compiled
- if the source depends on a class packaged in a JAR, the path of that =.jar=
  file must be added to the [[Classpath]]

To *disassemble* a =.class= file and print contents to stdout:
: $ javap <filename>.class
: -c             : prints disassembled code
: -p / -private  : show all classes and members
: -public        : show only public classes and members

** Manifest files

Contains /meta-information/ about a JAR.
- must be encoded in /UTF-8/
- pathname is always =META-INF/MANIFEST.MF=

*Attributes*, e.g.:
- ~Manifest-Version~: ?
- ~Created-By~: ?
- ~ClassPath~: the classpath
- ~Main-Class: <classname>~ -> application entry point
  - class has method with signature ~public static void main(String[] args)~
- ~Built-By~: ?
- ~Build-Jdk~: ?
- ~Build-Jdk-Spec~: ?

To *extract* the manifest file from a =.jar=:
: $ jar xf <filename>.jar META-INF/MANIFEST.MF
- e.g. to look for a ~ClassPath~ attribute

To *add to* the manifest file:
: $ jar cfm <filename>.jar <additions-file> <input-file(s) …>
- ~additions-file~ is a text file containing the manifest additions
  - /must/ end with a newline
- see [[https://docs.oracle.com/javase/tutorial/deployment/jar/modman.html][Modifying a Manifest File]] (Oracle)

** JAR files

Java Archive Tool: ~jar~
- [[https://docs.oracle.com/javase/tutorial/deployment/jar/index.html][Lesson: Packaging Programs in JAR Files]] (Oracle)

Flags:
: c  : create archive
: f  : specify archive file name
: t  : list the table of contents of the JAR
: x  : extract files from the JAR
: e  : specify entry point
: v  : print verbose output

To *create* a =.jar= file:
: $ jar cf <filename>.jar <input-file(s) …>
- ~input-file(s)~: files to be added to the JAR

To create a =.jar= with an /entry point/:
: $ jar cfe <filename>.jar <main-class> <input-file(s) …>
- sets the ~Main-Class~ attribute of the manifest

To *view* the contents of a =.jar=:
: $ jar tf <filename>.jar

To *extract* the contents of a =.jar= in the current directory:
: $ jar xf <filename>.jar
- to extract only specific files:
  : $ jar xf <filename>.jar <archived-file(s) …>

See [[Runtime]] on how to execute a JAR file.

* Maven
Maven is the most widely used package manager for Java.
- https://maven.apache.org
- [[https://central.sonatype.com][Maven Central Repository]]

Learn:
- https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
- https://mkyong.com/tutorials/maven-tutorials/

** Archetypes

To create an example archetype:
: $ mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false
- This executes the Maven goal ~archetype:generate~
  - ~archetype~ is the plugin that provides the goal
  - *plugin* -> collection of goals with general common purpose
- ~groupId~: defines the folder structure of source
- ~artifactId~: defines the name of the project folder
- The fully qualified artifact name of a project is:
  ~<groupId>:<artifactId>:<version>~

** Build

Build a =.jar= package:
: $ mvn package

(! check) Test the executable like this:
: $ java -cp target/my-app-1.0-SNAPSHOT.jar com.mycompany.app.App

** POM
POM -> Project Object Model
- https://maven.apache.org/guides/introduction/introduction-to-the-pom.html

* Language
** Keywords

Visibility modifier:
- ~public~: can be accessed from outside of the class/method or package
- (~default~): “package-private” -> ?
- ~private~: ?
- ~protected~: ?

- ~static~: ?
- ~abstract~: ?

- ~final~: ?

Declare a constant (immutable) with ~static final~.
- convention is to use all-caps for the variable name

** Classes

Classes without a constructor automatically get a *default constructor* (with
no arguments) on compilation.

It is common to have *getter* and *setter* methods in classes.
- e.g. ~getField~ and ~setField~

To create an *anonymous inner class* for one-time use:
: new <classname>() { … }
- e.g. in method arguments

*** Nested class
Classes can be nested inside other classes.
- can be made ~public~ or ~private~
- make ~static~ if nested class shouldn’t be able to access members of the
  outer class
- convention is to put inner classes on the top before other members

Example:
#+begin_src java
class MyClass {
	private class MyNestedClass {
		// …
	}

	private MyNestedClass o;

	public MyClass() {
		this.o = new MyNestedClass();
	}
}
#+end_src

*** Generic class
Classes can declare generic type variables to be used inside the class.
- can be used e.g. for generic data structures

Example:
#+begin_src java
class MyClass<T> { // generic type variable
    private T x;
    private T[] arr;

    public MyClass(T x) {
        this.x = x;
        // Java does not allow to create arrays of generic objects
        // so we need to instantiate them with Object and cast to generic
        // (the compiler warning can be ignored)
        this.arr = (T[]) new Object[3];
    }

    public static void main(String[] args) {
        // to instantiate:
        MyClass<String> hello = new MyClass<>("Hello generic world");
        MyClass<Integer> answer = new MyClass<>(42);
    }
}
#+end_src

*** Inheritance

~@Override~ before a method declaration tells the compiler, that the
corresponding method from base class will be overwritten.
- not necessary, but can be useful to avoid spelling mistakes in method
  inheritance and quickly see what methods have been overwritten
- overriding only applies to non-static methods
- see https://docs.oracle.com/javase/tutorial/java/IandI/override.html for
  special cases of overriding

*Implementation inheritance* is done by using the ~extends~ keyword.
- inherits all instance and static variables
- inherits all methods
- inherits all nested classes
- constructors are *not* inherited
- ~private~ members are /inaccessible/ from the subclass
- ~super()~ can call methods of the superclass within the subclass

All constructors *must start with* a call to one of the super class’s
constructors.
- if ~super()~ is not being called at the start of the subclass constructor,
  Java will automatically do it (without args)
- ~super()~ can be called with arguments to use a different constructor

*Interface inheritance* is done by using the ~implements~ keyword.
- the inheriting class must implement all specified methods
- interfaces can pass down implementations with the ~default~ keyword
  -> *NOT* recommended!

**** Static type / Dynamic type

The /static type/ is determined at *compile time* from the type declaration
of the variable.
- also called /compile-time type/
- immutable
- every expression has a compile-time type
- methods have compile-time type equal to their declared type

The /dynamic type/ is only determined at *run-time* after the object has
been initialized with the ~new~ keyword.
- also called /run-time type/
- can change at run-time if the variable gets reassigned
- every object must have a static type, but its dynamic type might be
  ~null~ if the variable is unassigned

Example:
#+begin_src java
Insect x = new Caterpillar();
x = new Butterfly();
#+end_src
- ~x~ has the /dynamic type/ ~Caterpillar~, but the /static type/ ~Insect~
- after the reassignment, ~x~ still has the static type of ~Insect~, but its
  /dynamic type/ is now ~Butterfly~

**** Upward casting / Downward casting

*Upward casting*: an object instantiated from a /subclass/ can be assigned
to a variable that has the type of its /superclass/.
: Superclass subObj = new Subclass();
- enabled the object to be used in more general contexts
- cannot call methods that are only defined in the subclass
- [[Dynamic method selection]] applies

*Downward casting*: an object instantiated from a /superclass/ usually
/cannot/ be assigned to a variable that has the type of its /subclass/.
However, the compiler can be convinced that the compile-time type of an
expression is of a certain other type than the one it has been declared
with:
: Subclass subObj = (Subclass) new Superclass();
- may result in a ~ClassCastException~ at runtime! (breaks type safety)
- dynamic type is unaffected, so [[Dynamic method selection]] may cause
  unexpected behaviour

**** Dynamic method selection

If in a method call the method of the static type has been overwritten
(~@Override~) by the dynamic type, the Java interpreter will select the
method of the *dynamic type*.

Example:
#+begin_src java
public class Animal {
    // …
    public void show() {
        // …
    }
}
public class Fox extends Animal {
    // …
    @Override
    public void show() {
        // …
    }
}

Animal fox = new Fox();
fox.show(); // ← calls show() from Fox class
#+end_src


*** Examples:
#+begin_src java
public class Point {
    public int x;
    public int y;
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
    public Point() {
        this(0, 0);
    }
    public double distanceTo(Point other) {
        return Math.sqrt(
            Math.pow(this.x - other.x, 2) +
            Math.pow(this.y - other.y, 2)
        )
    }
    public void translate(int dx, int dy) {
        this.x += dx;
        this.y += dy;
    }
}

// Usage like:
Point p1 = new Point(5, 9);
Point p2 = new Point(-3, 3);
System.out.println("Point 1: ( " + p1.x + ", " + p1.y + ")");
System.out.println("Distance: " + p1.distanceTo(p2));
p1.translate(2, 2);
System.out.println("Point 1: ( " + p1.x + ", " + p1.y + ")");
#+end_src
** Interfaces

#+begin_src java
public interface Subject {
    private final String DEFAULT_NAME = "X";

    public int getAge();

    // interfaces can also pass down (default) implementations:
    // - this is called “implementation inheritance”
    // - NOT recommended!
    default public String getName() {
        return this.DEFAULT_NAME;
    };
}

// implement an interface in a class like this:
public class Human implements Subject {
    private int age;
    private String name;

    // …

    @Override
    public int getAge() {
        return this.age;
    }
    // `getName()` already has a default implementation
}
#+end_src

** Methods
Declare *varargs* (variable argument number) using ~<type>...~
- example: ~myMethod(String arg, int... varargsArray) { … }~
  - call like ~myMethod("foo", 1, 2, 3)~ or with an array (?)
- all other variables must precede varargs

** Primitive Types

| Type    | Memory | Range                      | Example           |
|---------+--------+----------------------------+-------------------|
| ~byte~    | 8 bit  | -128 → 127                 | ~byte b = 65;~      |
| ~short~   | 16 bit | -2^15 → 2^15 - 1           | ~short s = 65;~     |
| ~int~     | 32 bit | -2^31 → 2^31 - 1           | ~int i = 65;~       |
| ~long~    | 64 bit | -2^63 → 2^63 - 1           | ~long l = 65L;~     |
|---------+--------+----------------------------+-------------------|
| ~float~   | 32 bit | 2^-149 → (2-2^-23)·2^127   | ~float f = 65f;~    |
| ~double~  | 64 bit | 2^-1074 → (2-2^-52)·2^1023 | ~double d = 65.55;~ |
|---------+--------+----------------------------+-------------------|
| ~boolean~ | -      | -                          | ~boolean b = true;~ |
|---------+--------+----------------------------+-------------------|
| ~char~    | 16 bit | 0 → 2^16 - 1 (all Unicode) | ~char c = 'A';~     |
|         |        | U+0000 … U+FFFF            | ~char c = 65;~      |

: Integer.MIN_VALUE : Integer.MAX_VALUE

Base prefixes:
- ~0x~: hexadecimal (base 6) (e.g. ~long color = 0x00FF00~)
- ~0~: octal (base 8)

Other primitives:
- ~null~
- ~undefined~
- ~void~

More infos:
- https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html
- https://en.wikibooks.org/wiki/Java_Programming/Primitive_Types

** Reference Types
Each [[*Primitive Types][primitive type]] (lowercase) has a corresponding *reference type* (capital
letter).
- it is easy to convert between primitive types and their reference types
: boolean -> Boolean
: int     -> Integer (not Int!)
: double  -> Double
: long    -> Long
: char    -> Character

*** Object Class
- [[https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/Object.html][Docs (Oracle)]]
- root of the class hierarchy
- *every* class has ~Object~ as a superclass
- all objects, including arrays, implement the methods of this class
- the ~clone~ method is /fundamentally broken/ (in modern Java)

*** Array

All values will initially take on their “default value”.
- e.g. ~0~ for ~int~, ~null~ for reference types

*Note:* Array indices can be determined at runtime, contrary to property
names of class instances which must be determined at compile time.
- /reflection/ can be used as an escape hatch for property names

Declaration:
: T[] x;
Instantiation:
: new T[<size>]
Shorthand syntax:
: new T[]{a, b, …}
or (only with variable declaration):
: T[] x = {a, b, …};

/n/-dimensional arrays (-> array of array references):
: T[][]… x;
: new T[<size>][]…
or to instantiate all inner arrays with size ~m~:
: new T[<n>][<m>]…
with shorthand syntax, use nested curly braces:
: {{… {a, b, …}}, …}

Member access:
: x[<index>] = <value>;

Array size:
: x.length

Copy ~n~ positions from (starting at) index ~i~ of ~fromArray~ to (starting at)
index ~j~ of ~toArray~:
: System.arraycopy(<fromArray>, <i>, <toArray>, <j>, <n>);
- faster than a loop, particularly for large arrays

**** java.util.Arrays

To pretty-print an Array:
: Arrays.toString(<array>);

To fill an array with the same value:
: Arrays.fill(<array>, <value>);

**** Examples:
#+begin_src java
// Iteration:
int[] nums = {42, 666, 69, 0};
for (int n : nums) {
    System.out.println(n);
}

// 2-dimensional array:
double[][] coords = new double[5][2];
coords[0] = new double[]{12.4, 17.8};
coords[1] = new double[]{-2.3, 3.5};
coords[2] = new double[]{-15.2, -3.1};
coords[3] = new double[]{4.5, -42.0};
coords[4] = new double[]{0.0, 3.14};

for (double[] c : coords) {
    int quadrantN = quadrant(c[0], c[1]);
    System.out.println("Quadrant: " + quadrantN);
}
#+end_src
*** String
- Strings are *reference types*: ~String s = "hello"~
- Strings are *not directly iterable* (use ~for~ loop).
- Strings are *immutable*

To create a String from a ~char~ array:
: new String(<char-array>)

Concatenation:
: s += " world";

Length:
: s.length();

Substring:
: s.substring(<from-int>);
: s.substring(<from-int>, <to-int>);
- ~from~ incl., ~to~ excl.
(?) To lookup the starting position of a substring of ~s~:
: s.indexOf(<str>)

Char at index:
: s.charAt(<index>)
All chars as an array:
: s.toCharArray()

To (lexicographically) compare two strings:
: strA.compareTo(<strB>)
- returns a *negative number* if ~strA~ < ~strB~
- returns a *positive number* if ~strA~ > ~strB~
- returns *zero* if ~strA~ == ~strB~

To check equality (don’t use ~==~ !):
: strA.equals(<strB>)
: strA.equalsIgnoreCase(<strB>)


Examples:
#+begin_src java
if (s.indexOf("hello") != -1) {
  System.out.println("\"hello\" in s");
}

// Iterate over chars using a for loop:
for (int i = 0; i < s.length(); i++) {
    char c = s.charAt(i);
}


// To create a new string with the same letter repeated:
char[] chars = new char[5];
Arrays.fill(chars, 'a');
String s = new String(chars);

// Simpler, but requires Java 11+:
(""+c).repeat(n)

#+end_src
*** Enum

Examples:
#+begin_src java
enum Fruits { Apple, Banana };

private String fruitsToString(Fruits fruit) {
	switch (fruit) {
		case Fruits.Banana:
			return "Banana";
		case Fruits.Apple:
			return "Apple";
	}
	return a == Fruits.Banana ? "Banana" : "Apple";
}
#+end_src

*** Abstract Data Types
**** List

Implementations:
- ~ArrayList~
- ~LinkedList~

Declaration:
: List<T> l;
- ~<T>~ for type not necessary, but will be (any) ~Object~ if omitted

Return an unmodifiable/immutable list containing /n/ elements:
: List.of(x1, …, xn);
(?) or:
: Arrays.asList(x1, …, xn);
- elements cannot be added or removed later

Adding items:
: l.add(<obj>);
Setting item on index:
: l.set(<index>, <obj>);
Removing items:
: l.remove(<index>);

Member access:
: l.get(<index>);

#+begin_src java
import java.util.ArrayList;
import java.util.List;

public class Foo {
    public static void main(String[] args) {
        List<String> l = new ArrayList();
        l.add("a");
        l.add("b");
        l.add("c");
        String s = l.get(0);
    }
}

// Iteration using for-each:
for (String x : list) {
    …
}

// Or using an iterator:
ListIterator<String> listIterator = list.listIterator();
while (listIterator.hasNext()) {
	String x = listIterator.next();
}

// To create a mutable List and add elements to it in the same statement:
List<String> L = new ArrayList<>(List.of("foo", "bar"));
#+end_src

**** Map

Main implementations:
- ~TreeMap~: keeps its keys sorted and is fast
- ~HashMap~: has no defined order and is (usually) very fast

Declaration:
: Map<keyT, valT> map;

Map size:
: map.size();

Putting items:
: map.put(<key>, <obj>);
Removing items:
: map.remove(<key>);

Member access:
: map.get(<key>);

Query contents (returns boolean):
: map.containsKey(<key>)

Get the set of keys (e.g. for iteration):
: map.keySet();

#+begin_src java
// Cannot use `int` type, use `Integer` instead:
Map<String, Integer> m = new TreeMap<>();
m.put("one", 1);
m.put("two", 2);

// To iterate over a map, use its set of keys:
for (String k : m.keySet()) {
    int v = m.get(k);
    System.out.println(k + ": " + v);
}

// Or use an iterator:
Set<String> keys = m.keySet();
Iterator<String> iterator = keys.iterator();
while (iterator.hasNext()) {
	String k = iterator.next();
    int v = m.get(k);
}
#+end_src

**** Set

Main implementations:
- ~TreeSet~: keeps its elements in “sorted” order, and is “fast”
- ~HashSet~: does not have a defined “order”, but is (usually) very “fast”

Cannot contain a duplicate item.

Declaration:
: Set<T> set;

Set size:
: set.size();

Adding items:
: set.add(<obj>);

Removing items:
: set.remove(<obj>);

Query contents (returns boolean):
: set.contains(<obj>);

Examples:
#+begin_src java
// To iterate over a set:
for (String x : set) {
    …
}

// Or use an iterator:
Iterator<String> iterator = set.iterator();
while (iterator.hasNext()) {
	String x = iterator.next();
}
#+end_src

** Control structures

*if* conditional:
: if (<condition>) {
:   <statement(s) …>
: } else if (<else-cond>) {
:   <statement(s) …>
: } else {
:   <statement(s) …>
: }
- multiple ~else if~ allowed

*Ternary operator*:
: <condition> ? <return-if-true> : <return-if-false>

*while* loop:
: while (<condition>) {
:   <statement(s) …>
: }
- statements only execute when ~condition~ is ~true~
*do-while* loop:
: do {
:   <statement(s) …>
: } while (<condition>);
- statements also execute once before ~condition~ is checked

*for* loop:
: for (<initialization>; <termination>; <increment>) {
:   <statement(s) …>
: }
- ~initialization~ instruction executes once before beginning
- if ~termination~ condition is ~false~, loop terminates
- ~increment~ instruction is invoked after each iteration
*for each* loop:
: for (<declaration> : <collection>) {
:   <statement(s) …>
: }
- strings are not iterable!

to leave a loop:
: break;
to jump to the next iteration:
: continue;

*switch* statement:
: switch (<var>) {
:   case <value1>:
:     <expr>;
:   case <value2>:
:   case <value3>:
:     <expr>; break;
:   default:
:     <expr>;
: }

*switch expressions*:
- see [[*Switch expressions (since Java 12-14)][Switch expressions (since Java 12-14)]]

Examples:

#+begin_src java
// infinite loop
while (true) {
    // …
}

// iterating 10 steps:
for (int i = 0; i < 10; i ++) {
    // …
}

// equivalent while loop:
int i = 0;
while (i < 10) {
    // …
    i++;
}

// labeled break/continue:
first:
for (int i = 0; i < 4; ++i)
{
    second:
    for (int j = 0; j < 4; ++j)
    {
        third:
        for (int k = 0; k < 4; ++k)
        {
            System.out.println ("inner start: i+j+k " + (i + j + k));
            if (i + j + k == 5)
                continue third;
            if (i + j + k == 7)
                continue second;
            if (i + j + k == 8)
                break second;
            if (i + j + k == 9)
                break first;
            System.out.println ("inner stop:  i+j+k " + (i + j + k));
        }
    }
}
#+end_src

** Boolean operators

: !x
: x && y
: x || y
: x == y
: x != y
: x ^ y  // XOR

** Math

: Math.pow(n, exp)

** System

To print to console:
: System.out.println(<str|obj>);
- calls the ~.toString~ method of the object

(?) To end a program:
: System.exit(0);

** Exceptions

: try {
:   …
: } catch (<exception class> <name>) {
:   …
: }
- use ~Exception~ class for a generic exception
- use ~RuntimeException~ class to throw exceptions that need not be caught

If a method may produce errors, it can be defined to throw an exception,
which is to be handled by the caller (in a try-catch block):
: … myMethod()
:   throws Exception {
:     …
:   }

#+begin_src java
try {
    if (arr.length == 0) {
        throw new Exception("There are no elements in the array!");
    }
} catch (Exception e) {
    System.err.println("Caught Exception: " + e.getMessage());
    // or:
    e.printStackTrace();
}
#+end_src
** Newer features

See [[https://www.youtube.com/watch?v=NccnidiRknA]["(Modern) Java for Clojure Programmers" by James Henderson]] (YouTube)

*** Local variable type inference (since Java 10)

Java infers the type of the variable:
: var x = <value>

*** ~switch~ expressions (since Java 12-14)

: <var> = switch (<var>) {
:   case <value1>           -> <expr>;
:   case <value2>, <value3> -> <expr>;
: };

*** Pattern matching for ~instanceof~ (since Java 14-16)

This was such a common pattern that there is now a shortcut.

Example:
#+begin_src java
// previously we had to explicitly downcast to the subclass:
if (obj instanceof String) {
    String s = (String) obj;
    // …
}

// now, s can be bound directly:
if (obj instanceof String s) {
    // …
}
#+end_src

*** Pattern matching in ~switch~ (since Java 17-21)

- can match on subtype
- guards are possible

Example:
#+begin_src java
static String formatter(Object obj) {
    return switch (obj) {
        case Integer i
            -> String.format("int %d, i");
        case Long l
            -> String.format("long %d, l");
        case Double d
            -> String.format("double %f, d");
        case String s
            -> String.format("String %s, s");
        default
            -> obj.toString();
    };
}
#+end_src
*** ~record~'s (since Java 14-16)

Classes with immutable fields, etc. Similar to Clojure records.

Example:
#+begin_src java
// before:
class Point {
    private final int x;
    private final int y;

    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    int x() { return x; }
    int y() { return y; }

    // …
}

// now:
record Point(int x, int y) {
    // …
}
#+end_src

* Higher order functions
- Examples source: [[https://docs.google.com/presentation/d/1kddUDGDz_fxbWtUBXP-7-PsYG0JwAjPgyQ5zmDSGmx8/edit#slide=id.g10a4194b67_0_295][CS 61B 2023, lecture 9]]

** Before Java 8

Before Java 8, it was not possible to pass methods as arguments to other
methods. Memory boxes (variables) could not contain pointers to methods.

However, there is a workaround using [[Interfaces]]. Before Java 8, it was
implemented like this:
#+begin_src java
// Create an interface for any kind function that takes an Int and returns one:
public interface IntUnaryFunction {
    int apply(int x);
}

// Implement it in a class created just for the specific function TenX:
public class TenX implements IntUnaryFunction {
    public int apply(int x) {
        return 10 * x;
    }
}

// A “higher-order method” can now take any object of the general type
// `IntUnaryFunction` and call its `apply` method to “call” the “function”:
public class Java7HoFDemo {
    public static int doTwice(IntUnaryFunction f, int x) {
        return f.apply(f.apply(x));
    }
    public static void main(String[] args) {
        System.out.println(doTwice(new TenX(), 2));
    }

}
#+end_src

** Java 8 and later

Since Java 8, types can hold references to methods:
#+begin_src java
public class Java8HoFDemo {
    public static int tenX(int x) {
        return 10 * x;
    }
    public static int doTwice(Function<Integer, Integer> f, int x) {
        return f.apply(f.apply(x));
    }
    public static void main(String[] args) {
        int result = doTwice(Java8HoFDemo::tenX, 2);
        System.out.println(result);
    }
}
#+end_src

* Minimal example app

1. Create =Foo.java=:
#+begin_src java
public class Foo {
  public static void main(String[] args) {
    System.out.println("Hello Java!");
    Bar.coffee();
  }
}
#+end_src
- does not need a package name
- does not need an import statement if both classes are in the same package,
  but they must be in the same directory

2. Create =Bar.java=:
#+begin_src java
public class Bar {
  public static void coffee() {
    System.out.println("Sipping coffee…");
  }
}
#+end_src

3. Compile =Foo.java=:
: $ javac Foo.java
4. Run it:
: $ java Foo

** Create a JAR:
1. Generate the JAR, using all class files, with ~Foo~ as the ~Main-Class~:
: $ jar cfe app.jar Foo Foo.class Bar.class
2. Execute the JAR:
: $ java -jar app.jar
: > Hello Java!
: > Sipping coffee…

*** From a separate manifest file:
1. Create a text file for manifest additions, e.g. with the entry point:
: $ echo 'Main-Class: Foo\n' >> Manifest.txt
2. Generate the JAR, using the additions:
: $ jar cfm app.jar Manifest.txt Foo.class Bar.class
* Testing

Testing framework *JUnit*:
- https://junit.org

Examples:
#+begin_src java
import static org.junit.jupiter.api.Assertions.assertThrows;

// To assert that an exception is thrown:
// - from https://stackoverflow.com/a/40268447/1204047
@Test
void exceptionTesting() {
    MyException thrown = assertThrows(
           MyException.class,
           () -> myObject.doThing(),
           "Expected doThing() to throw, but it didn't"
    );

    assertTrue(thrown.getMessage().contains("Stuff"));
}
#+end_src
