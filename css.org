#+title: Docs/CSS

* unclear

Content with fixed size overflows its fixed-sized container, except when
~overflow: hidden~ is set.

* Box Model

- [[https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/The_box_model][The box model]] (mdn/guides)

** Parts of a box

*Content box*: area where content is displayed
- size with properties like:
  - ~width~ / ~height~
  - ~inline-size~ = ~width~ by default (depends on ~writing-mode~)
  - ~block-size~ = ~height~ by default (depends on ~writing-mode~)

*Padding box*: white space around the content
- size with ~padding~ & related
- ~padding~ cannot be negative

*Border box*: wraps content and padding
- size with ~border~ & related

*Margin box*: wraps content, padding and border as whitespace against other elems
- size with ~margin~ & related
- added after the size of the visible box has been calculated (both models)
- ~margin~ can be negative to subtract neighbour spacing
- adjacent margins collapse according to the following rules:
  - *if both positive*: choose the /largest/ margin
  - *if both negative*: choose the /smallest/ margin
  - *if one negative*: /subtract/ it from the total
  - see also [[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_model/Mastering_margin_collapsing][Mastering margin collapsing]] (mdn)

---

*Standard box model*: Usually, ~padding~ and ~border~ are added to the /content box/ dimensions.
: box-sizing: content-box  (default)

*Alternative box model*: To have the computed size (when possible) always
correspond to the box dimensions and fit ~padding~ and ~border~ into it, set:
: box-sizing: border-box

** Outer display type

Controls, how the box itself is laid out in relation to siblings and its parent.

---

: display: block

*Behavior:*
- will break onto a new line
- ~width~ and ~height~ properties are respected
  - if ~width~ is not specified, box will extend in the /inline direction/ to
    fill the available space (often 100% of the container width)
- ~padding~, ~margin~ and ~border~ cause other elements to be pushed away

*Default* in ~<h1>~, ~<p>~, ~<div>~, etc.

---

: display: inline

*Behavior:*
- will *not* break onto a new line
- ~width~ and ~height~ properties will *not* apply
- *top/bottom* ~padding~, ~margin~ and ~border~ will apply but will *not* cause other
  inline boxes to move away
- *left/right* ~padding~, ~margin~ and ~border~ will apply and will cause other
  inline boxes to move away

*Default* in ~<a>~, ~<span>~, ~<em>~, ~<strong>~, etc.

---

: display: inline-block

*Behavior:*
- like ~block~, but will *not* break onto a new line
- does not become larger than its content except if ~width~ / ~height~ are set
  explicitly

** Inner display type

Controls, how elements inside the box are laid out.
- by default, elements are laid out in [[https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow][normal flow]] and behave as *block* or
  *inline* boxes

---

: display: flex
- sets outer display type to ~block~
: display: inline-flex
- sets outer display type to ~inline~

*Behavior:*
- direct children will become *flex items*

---

: display: grid
** Flexbox
Short for “Flexible Box Layout”. Makes it easier to lay out things in one
dimension.
- https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout
- https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox
- https://www.w3.org/TR/css-flexbox-1/

#+CAPTION: Flex model terms
#+NAME: fig_flex-terms
#+ATTR_HTML: :width 90%
[[./_res/css/flex_terms.png]]
- [[https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox][Source]]

Make the element a *flex container* and its children *flex items*:
: display: flex
- *note*: margins don’t collapse!

Defaults:
- ~flex-direction: row~
- ~align-items: stretch~

*** Flex Container properties

*Main axis direction* in which items are layed out:
: flex-direction  :: row | row-reverse | column | column-reverse | …

*Main axis wrapping* onto multiple lines if items overflow container:
: flex-wrap  :: nowrap | wrap | wrap-reverse
- tries to fill a line (→ /main axis/) with as many items as the container
  size allows (without /overflow/)
- the number of items in one line is determined by the items ~flex~ property
- remaining items in the last row may be wider to fill the entire row
- ~wrap-reverse~ will let wrapped lines stack in reverse order

Shorthand to set the *item flow*:
: flex-flow
- https://developer.mozilla.org/en-US/docs/Web/CSS/flex-flow
*keywords:*
:            :: initial => row nowrap
:            :: inherit | revert | revert-layer | unset
*single property:*
:            :: <flex-direction> => x nowrap
:            :: <flex-wrap>      => row y
*multiple properties:*
:            :: <flex-direction> <flex-wrap>

*** Flex Item properties

Set how the item *flexibly grows/shrinks* (in ~flex-direction~) to fit the
available space of the flex container:
: flex
- https://developer.mozilla.org/en-US/docs/Web/CSS/flex
- for most purposes, set to ~auto~, ~initial~, ~none~ or a positive integer
*keywords:*
:       :: initial => 0 1 auto
- item is /sized/ according to its ~width~ & ~height~ properties
- /shrinks/ to its min size to fit the container
- does not /grow/
:       :: auto    => 1 1 auto
- item is /sized/ according to its ~width~ & ~height~ properties
- /shrinks/ to its min size to fit the container
- /grows/ to absorb any extra free space in the container
:       :: none    => 0 0 auto
- item is sized according to its ~width~ & ~height~ properties
- neither /shrinks/ nor /grows/
:       :: inherit | revert | revert-layer | unset
*single property:*
:       :: <flex-grow>  => x 1 0
- other values are ~0~
:       :: <flex-basis> => 1 1 x
- like width/height
*multiple properties:*
:       :: <flex-grow> <flex-basis>               => x 1 y
:       :: <flex-grow> <flex-shrink>              => x y 0
:       :: <flex-grow> <flex-shrink> <flex-basis> => x y z
- exceeding the size given by ~flex-basis~ will cause the rest of the
  available space to be shared according to ~flex-grow~

Flex-properties can be set individually:
: flex-grow    :: <int+>
: flex-shrink  :: <int+>
: flex-basis   :: <size>
** Grid

: display: grid

** Alignment / Distribution

- [[https://www.w3.org/TR/css-align/][CSS Box Alignment Module Level 3]] (W3C)
- [[https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_box_alignment][CSS box alignment]] (mdn)

*** All items in a container

*Alignment of items:*
- flexbox → on *cross axis* for all items (→ ~align-self~)
- grid → on *block axis* of items within their *grid area*
: align-items  :: start | center | end | flex-start | flex-end
:              :: normal | *stretch*
:              :: baseline | first baseline | last baseline
- https://developer.mozilla.org/en-US/docs/Web/CSS/align-items
- ~stretch~ will stretch out elements to fill the containers /cross axis/
  - doesn’t work if elements’ ~height~ is fixed
  - if containers’ ~height~ is not fixed, all items will become as tall as
    the tallest item

*Distribution of space* between/around content items:
- flexbox → along *main axis* for all items (as a whole):
- grid → along *inline axis* of a grid container
: justify-content  :: start | center | end | *flex-start* | flex-end
:                  :: left | right
:                  :: normal
:                  :: space-between | space-around | space-evenly | stretch
- *ignored in flexbox layouts*
- the ~flex-~ values respect the ~-reverse~ values of ~flex-direction~ (might
  not work in some older browsers)
  - see https://stackoverflow.com/a/54278834/1204047

*Distribution of space* between/around content items:
- flexbox → along *cross axis* for wrapped lines
- grid → along *block axis*
: align-content  :: start | center | end | flex-start | flex-end
:                :: space-between | space-around | space-evenly | stretch
:                :: normal
:                :: baseline | first baseline | last baseline
- https://developer.mozilla.org/en-US/docs/Web/CSS/align-content
- e.g. on flex-wrap, distributes space between/around wrapped lines

*Gap between rows/columns* (multi-column, flexbox and grid layouts):
: gap  :: <row-gap>              => x x
:      :: <row-gap> <column-gap> => x y
Shorthand for:
: column-gap  :: <units> | *normal*
: row-gap  :: <units> | *normal*
- can use length or percentage units
- use e.g. ~calc(10% + 20px)~ to calculate units

*** Individual items

Override a grid or flex item’s ~align-items~ value:
- flexbox: aligns the item on the *cross axis*
- grid: aligns the item inside the *grid area*
: align-self  :: <...align-items>

Change the *layout order* without affecting the /source order/ (flexbox/grid):
: order  :: <int>
- default: ~0~ (for all flex items)
- negative values can be used to make items appear before ~0~
- flex items with equal order values will appear in their /source order/
** Columns
See:
- https://developer.mozilla.org/en-US/docs/Web/CSS/columns
- [[https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Multiple-column_Layout][Multiple-column layout]] (mdn/guides)

: columns: …

* Normal flow

How the browser lays out HTML by default when not changed explicitly.
- elements are stacked according to *source order*
- elements are layed out according to their *display type* and as described by
  the *block/inline direction* (language-dependent)

* Positioning

Positions other than ~static~ use the ~top~, ~bottom~, ~left~, and ~right~ (/tblr/)
properties to determine the final element position and the ~z-index~ for the
stacking order.
- positioned elements always appear on top of non-positioned elemeents
- two positioned elements without explicit ~z-index~ are stacked according to
  the /source order/ (later elements will be on top)
- by default, positioned elements all have a ~z-index~ of ~auto~, which is
  effectively ~0~
- ~z-index: -1~ can make a positioned element appear behind a ~static~ one

---

: position: static

Puts the element into its *normal position in the document flow*.

---

: position: relative

The element *remains in the document flow*, but *can be positioned relative* to
its /normal position/ and the /containing elements content-box/.

---

: position: absolute

*Removes the element from document flow* and *puts it into its own layer*, where
it can be positioned /relative to its containing elements padding-box/
- without /tblr properties/ set, initial position is the elements /normal
  position/ in the /document flow/
  - *note*: margins will not be collapsed!
- /tblr properties/ can be used in combination to resize the element

The *containing element* is determined by the parent element that is positioned
*non-static* itself.
- if no such element exists, it is the *initial containing block* that contains
  the ~<html>~ element and has the dimensions of the viewport
- see [[https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block][Identifying the containing block]] (mdn)

---

: position: fixed

Exactly like ~absolute~, but *fixes the element in place relative to the visible
portion of the viewport*.

The *containing element* is always the *initial containing block* with the
dimensions of the viewport.

---

: position: sticky

Element behaves as in ~relative~ *until scrolled to a certain threshold* (e.g.
10px from the top of the viewport), *after which it becomes fixed*.
- can be used for navigation bars or a scrolling index

Element is “sticky” relative to the *nearest anchestor with a scrolling
mechanism*, which is determined by its ancestors’ ~position~ property.
